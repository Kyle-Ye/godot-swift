extension Godot 
{
    enum DynamicCallError
    {
        case invalidArgument(Godot.Variant?, expected:Any.Type)
        case invalidArgumentTuple(Int, expected:Any.Type)
        case invalidArgumentCount(Int, expected:Int)
    }
}
extension Godot.DynamicCallError 
{
    var description:String 
    {
        switch self 
        {
        case .invalidArgumentCount(let count, expected: let expected):
            if count < expected
            {
                let positions:String = (count ..< expected).map{ "#\($0)" }.joined(separator: ",")
                return "missing arguments for parameter\(expected - count > 1 ? "s" : "") \(positions) in call"
            }
            else 
            {
                let positions:String = (expected ..< count).map{ "#\($0)" }.joined(separator: ",")
                return "extra arguments at positions\(count - expected > 1 ? "s" : "") \(positions) in call"
            }
        case .invalidArgumentTuple(let count, expected: let expected):
            return "cannot convert Godot.List with \(count) elements to expected argument type '\(String.init(reflecting: expected))'"
        case .invalidArgument(let value, expected: let expected):
            let reflection:String = value.map{ String.init(reflecting: type(of: $0)) } ?? "Void"
            return "cannot convert value of type '\(reflection)' to expected argument type '\(String.init(reflecting: expected))'"
        }
    }
}

extension Godot
{
    fileprivate 
    typealias API = 
    (
        Swift.Void,
        (
            godot_gdnative_core_api_struct, 
            godot_gdnative_core_1_1_api_struct, 
            godot_gdnative_core_1_2_api_struct
        ),
        nativescript:
        (
            swift:Int32, // language index
            (
                godot_gdnative_ext_nativescript_api_struct, 
                godot_gdnative_ext_nativescript_1_1_api_struct
            )
        )
    )
    
    fileprivate private(set) static 
    var api:API = ( (), (.init(), .init(), .init()), (-1, (.init(), .init())) )
    
    private static 
    func version(from head:godot_gdnative_api_struct) -> (major:Int, minor:Int)
    {
        // find the highest api version available 
        var version:godot_gdnative_api_version = head.version
        var next:UnsafePointer<godot_gdnative_api_struct>? = head.next 
        while let current:UnsafePointer<godot_gdnative_api_struct> = next 
        {
            version = current.pointee.version
            next    = current.pointee.next
        }
        return (.init(version.major), .init(version.minor))
    }
    
    private static 
    func loadCoreAPI(head:godot_gdnative_core_api_struct) 
        -> 
        (
            godot_gdnative_core_api_struct, 
            godot_gdnative_core_1_1_api_struct, 
            godot_gdnative_core_1_2_api_struct
        )
    {
        guard   let v1_1:UnsafePointer<godot_gdnative_api_struct> = head.next, 
                let v1_2:UnsafePointer<godot_gdnative_api_struct> = v1_1.pointee.next 
        else 
        {
            let (major, minor):(Int, Int) = withUnsafeBytes(of: head)
            {
                Self.version(from: $0.load(as: godot_gdnative_api_struct.self))
            }
            fatalError("godot-swift requires gdnative version 1.2 or higher (have version \(major).\(minor))")
        }
        
        return 
            (
            head,
            UnsafeRawPointer.init(v1_1).load(as: godot_gdnative_core_1_1_api_struct.self),
            UnsafeRawPointer.init(v1_2).load(as: godot_gdnative_core_1_2_api_struct.self)
            )
    }
    
    private static 
    func loadNativeScriptAPI(head:UnsafePointer<godot_gdnative_api_struct>) 
        -> 
        (
            godot_gdnative_ext_nativescript_api_struct, 
            godot_gdnative_ext_nativescript_1_1_api_struct 
        )
    {
        guard   let v1_1:UnsafePointer<godot_gdnative_api_struct> = head.pointee.next 
        else 
        {
            let (major, minor):(Int, Int) = Self.version(from: head.pointee)
            fatalError("godot-swift requires gdnative nativescript version 1.1 or higher (have version \(major).\(minor))")
        }
        
        return 
            (
            UnsafeRawPointer.init(head).load(as: godot_gdnative_ext_nativescript_api_struct.self),
            UnsafeRawPointer.init(v1_1).load(as: godot_gdnative_ext_nativescript_1_1_api_struct.self)
            )
    }
    
    fileprivate static 
    func initialize(api head:godot_gdnative_core_api_struct) 
    {
        // gather extensions 
        var extensions:
        (
            nativescript:UnsafePointer<godot_gdnative_api_struct>?, 
            Swift.Void
        ) 
        = 
        (nil, ())
        for i:Int in 0 ..< Int.init(head.num_extensions)
        {
            switch (head.extensions[i]?.pointee.type).map(GDNATIVE_API_TYPES.init(rawValue:))
            {
            case GDNATIVE_EXT_NATIVESCRIPT?:
                extensions.nativescript = head.extensions[i]
            default:
                break
            }
        }
        
        guard let nativescript:UnsafePointer<godot_gdnative_api_struct> = extensions.nativescript 
        else 
        {
            fatalError("could not find gdnative nativescript extension")
        }
        
        Self.api.1              = Self.loadCoreAPI        (head: head)
        Self.api.nativescript.1 = Self.loadNativeScriptAPI(head: nativescript)
        
        // instance binding 
        let bridge:godot_instance_binding_functions = .init(
            alloc_instance_binding_data: 
            {
                // do not allocate anything, just store the metatype pointer 
                (
                    _:UnsafeMutableRawPointer?, // `nil`, ... from `data`?
                    metatype:UnsafeRawPointer?, 
                    _:UnsafeMutableRawPointer? // object, not used here
                ) -> UnsafeMutableRawPointer? 
                in
                // cast away the const, but this is okay because we are just 
                // using the metatype pointer to encode an integer index
                .init(mutating: metatype)
            },
            free_instance_binding_data: 
            {
                (
                    _:UnsafeMutableRawPointer?, // `nil`, ... from `data`?
                    _:UnsafeMutableRawPointer? // metatype
                )
                in
                // do nothing 
            }, 
            refcount_incremented_instance_binding:  nil,
            refcount_decremented_instance_binding:  nil,
            data:                                   nil, 
            free_func:                              nil) 
        
        Self.api.nativescript.swift = Self.api.nativescript.1.1
            .godot_nativescript_register_instance_binding_data_functions(bridge)
        
        for (i, metatype):(Int, AnyDelegate.Type) in Self.DelegateTypes.enumerated()
        {
            Self.api.nativescript.1.1.godot_nativescript_set_global_type_tag(
                Self.api.nativescript.swift, 
                metatype.symbol, 
                UnsafeRawPointer.init(bitPattern: i)) 
        }
    }
    
    fileprivate static 
    func deinitialize() 
    {
        // must happen before clearing nativescript api, for obvious reasons
        Self.api.nativescript.1.1
            .godot_nativescript_unregister_instance_binding_data_functions(Self.api.nativescript.swift)
        Self.api.nativescript.1.1   = .init()
        Self.api.nativescript.1.0   = .init()
        
        Self.api.1.2                = .init()
        Self.api.1.1                = .init()
        Self.api.1.0                = .init()
        Self.api.nativescript.swift = -1
    }
    
    // global functions 
    static 
    func type(of core:UnsafeMutableRawPointer) -> Godot.AnyDelegate.Type 
    {
        let index:Int = .init(bitPattern: Self.api.nativescript.1.1
            .godot_nativescript_get_instance_binding_data(Self.api.nativescript.swift, core))
        return Self.DelegateTypes[index]
    }
    
    static 
    func print(_ items:Any..., separator:Swift.String = " ", terminator:Swift.String = "") 
    {
        var string:godot_string = .init(packing:
            "(swift) \(items.map{"\($0)"}.joined(separator: separator))\(terminator)")
        withUnsafePointer(to: string, Self.api.1.0.godot_print)
        string.deinit()
    }
    static 
    func print(warning:Swift.String, function:Swift.String = #function, file:Swift.String = #file, line:Int32 = #line) 
    {
        Self.api.1.0.godot_print_warning("(swift) \(warning)", function, file, line)
    }
    static 
    func print(error:Swift.String, function:Swift.String = #function, file:Swift.String = #file, line:Int32 = #line) 
    {
        Self.api.1.0.godot_print_error("(swift) \(error)", function, file, line)
    }
    static 
    func print(error:DynamicCallError, function:Swift.String = #function, file:Swift.String = #file, line:Int32 = #line) 
    {
        Self.print(error: error.description, function: function, file: file, line: line)
    }
    
    // debug utilities 
    static 
    func dump(_ string:godot_string) 
    {
        withUnsafeBytes(of: string) 
        {
            let storage:UnsafePointer<Int32>    = $0.load(as: UnsafePointer<Int32>.self)
            let count:Int                       = .init(storage[-1])
            let retains:Int32                   =       storage[-2]
            let scalars:[Unicode.Scalar]        = (0 ..< count).map 
            {
                Unicode.Scalar.init(Int.init(storage[$0])) ?? "\u{0}" 
            }
            Swift.print(
                """
                Godot::String (\($0.count) bytes)
                {
                    copy-on-write data (buffer at \(storage)) 
                    {
                        count           : \(count)
                        scalars         : \(scalars) 
                        reference count : \(retains)
                    }
                }
                """
            )
        }
    }
    static 
    func dump(_ array:godot_array) 
    {
        withUnsafeBytes(of: array) 
        {
            let storage:UnsafeRawPointer        = $0.load(as: UnsafeRawPointer.self)
            let retains:UInt32                  = storage.load(as: UInt32.self)
            
            if let cowdata:UnsafePointer<Int32> = storage.load(
                fromByteOffset: 2 * MemoryLayout<UnsafePointer<Int32>?>.stride, 
                as:                              UnsafePointer<Int32>?.self)
            {
                Swift.print(
                    """
                    Godot::Array (\($0.count) bytes)
                    {
                        Godot::Array::ArrayPrivate (buffer at \(storage)) 
                        {
                            reference count : \(retains)
                            
                            copy-on-write data (buffer at \(cowdata)) 
                            {
                                count           : \(cowdata[-1])
                                reference count : \(cowdata[-2])
                            }
                        }
                    }
                    """
                )
            }
            else 
            {
                Swift.print(
                    """
                    Godot::Array (\($0.count) bytes)
                    {
                        Godot::Array::ArrayPrivate (buffer at \(storage)) 
                        {
                            reference count : \(retains)
                            
                            copy-on-write data (nil)
                        }
                    }
                    """
                )
            }
        }
    }
    static 
    func dump(object:UnsafeMutableRawPointer) 
    {
        let id:UInt64 = object.load(fromByteOffset: 8 * 9, as: UInt64.self)
        var stringname:godot_string_name    = object.load(fromByteOffset: 8 * 30, 
            as: godot_string_name.self)
        let classname:Swift.String          = .init(Godot.String.init(retained: 
            Self.api.1.0.godot_string_name_get_name(&stringname)))
        
        let retains:UInt32                  = object.load(fromByteOffset: 8 * 31, as: UInt32.self)
        
        Swift.print(
            """
            Godot::Object (object at \(object))
            {
                object id       : \(id)
                class name      : \(classname)
                reference count : \(retains)
            }
            """
        )
    }
}

/* func _testsemantics() 
{
    do 
    {
        // +1
        var s1:godot_string = Godot.api.1.0.godot_string_chars_to_utf8("foofoo")
        
        Godot.dump(s1)
        
        // +2
        var v1:godot_variant = .init() 
        Godot.api.1.0.godot_variant_new_string(&v1, &s1)
        
        Godot.dump(s1)
        
        // +3
        var s2:godot_string = Godot.api.1.0.godot_variant_as_string(&v1)
        
        Godot.dump(s1)
        Godot.dump(s2)
        
        Godot.api.1.0.godot_variant_destroy(&v1)
        // +2
        
        Godot.dump(s1)
        
        Godot.api.1.0.godot_string_destroy(&s2)
        // +1
        
        Godot.dump(s1)
    }
    
    do 
    {
        // +1 
        var a1:godot_array = .init() 
        Godot.api.1.0.godot_array_new(&a1)
        
        Godot.dump(a1)
        
        Godot.api.1.0.godot_array_resize(&a1, 5)
        
        Godot.dump(a1)
        
        // +2
        var v1:godot_variant = .init() 
        Godot.api.1.0.godot_variant_new_array(&v1, &a1)
        
        Godot.dump(a1)
        
        // +3
        var a2:godot_array = Godot.api.1.0.godot_variant_as_array(&v1)
        
        Godot.dump(a1)
        Godot.dump(a2)
        
        Godot.api.1.0.godot_variant_destroy(&v1)
        // +2
        
        Godot.dump(a1)
        
        Godot.api.1.0.godot_array_destroy(&a2)
        // +1
        
        Godot.dump(a1)
    }
} */
