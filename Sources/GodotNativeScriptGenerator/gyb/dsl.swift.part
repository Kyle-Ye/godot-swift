// user-facing DSL

/// infix operator <- : AssignmentPrecedence
///     Represents a symbol binding. 
/// #   (0:)
infix operator <- : AssignmentPrecedence

/// func (<-)<T>(type:symbol:)
/// where T:Godot.NativeScript
///     Binds a nativescript type to a GDScript class name.
/// - type  :T.Type 
/// - symbol:String 
///     The name to expose [`T`] as in GDScript.
/// - ->    :Godot.Library.Interface.NativeScriptType
/// #   (0:binding-operators)
func <- <T>(_:T.Type, symbol:String) -> Godot.Library.Interface.NativeScriptType
    where T:Godot.NativeScript
{
    .init(type: T.self, symbol: symbol)
}

extension Godot.Library.Interface 
{
    /// static func Godot.Library.Interface.buildExpression(_:)
    /// - declaration   :NativeScriptType 
    /// - ->            :[NativeScriptType]
    /// #   (0:$result-builder)
    static 
    func buildExpression(_ declaration:NativeScriptType) -> [NativeScriptType]
    {
        [declaration]
    }
    /// static func Godot.Library.Interface.buildBlock(_:)
    /// - declarations  :[NativeScriptType]...
    /// - ->            :[NativeScriptType]
    /// #   (0:$result-builder)
    static 
    func buildBlock(_ declarations:[NativeScriptType]...) -> [NativeScriptType]
    {
        .init(declarations.joined())
    }
    /// static func Godot.Library.Interface.buildFinalResult(_:)
    ///     Creates a library interface from a list of type descriptors.
    /// 
    ///     This method will coalesce all type descriptors with the same underlying 
    ///     Swift type into a single descriptor.
    /// - declarations  :[NativeScriptType]...
    /// - ->            :[Self]
    /// #   (0:$result-builder)
    static 
    func buildFinalResult(_ declarations:[NativeScriptType]) -> Self 
    {
        var groups:[ObjectIdentifier: NativeScriptType] = [:]
        for declaration:NativeScriptType in declarations 
        {
            let key:ObjectIdentifier = .init(declaration.type)
            if  let index:Dictionary<ObjectIdentifier, NativeScriptType>.Index = 
                groups.index(forKey: key)
            {
                groups.values[index].symbols.append(contentsOf: declaration.symbols)
            }
            else 
            {
                groups[key] = declaration 
            }
        }
        // sort by type string to provide stability 
        return .init(types: groups.values.sorted 
        {
            String.init(reflecting: $0.type) < String.init(reflecting: $1.type)
        })
    }
}

extension Godot.NativeScriptInterface 
{
    /// enum Godot.NativeScriptInterface.Signals
    /// @   resultBuilder 
    ///     Declare signals using an expressive domain-specific language.
    /// #   (10:godot-nativescript-interface-usage)
    @resultBuilder
    enum Signals
    {
        /// static func Godot.NativeScriptInterface.Signals.buildExpression<T>(_:)
        /// where T:Godot.Signal 
        /// - type          :T.Type 
        /// - ->            :[Signal]
        /// #   (0:$result-builder)
        static 
        func buildExpression<T>(_:T.Type) -> [Signal]
            where T:Godot.Signal 
        {
            [(T.name, T.annotations, T.self)]
        }
        /// static func Godot.NativeScriptInterface.Signals.buildBlock(_:)
        /// - declarations  :[Signal]...
        /// - ->            :[Signal]
        /// #   (0:$result-builder)
        static 
        func buildBlock(_ declarations:[Signal]...) -> [Signal]
        {
            .init(declarations.joined())
        }
    }
    /// enum Godot.NativeScriptInterface.Methods
    /// @   resultBuilder 
    ///     Declare instance methods using an expressive domain-specific language.
    /// #   (11:godot-nativescript-interface-usage)
    @resultBuilder
    enum Methods
    {
        /// static func Godot.NativeScriptInterface.Methods.buildExpression(_:)
        /// - declaration   :Method 
        /// - ->            :[Method]
        /// #   (0:$result-builder)
        static 
        func buildExpression(_ declaration:Method) -> [Method]
        {
            [declaration]
        }
        /// static func Godot.NativeScriptInterface.Methods.buildBlock(_:)
        /// - declarations  :[Method]...
        /// - ->            :[Method]
        /// #   (0:$result-builder)
        static 
        func buildBlock(_ declarations:[Method]...) -> [Method]
        {
            .init(declarations.joined())
        }
    }
    /// enum Godot.NativeScriptInterface.Properties
    /// @   resultBuilder 
    ///     Declare instance properties using an expressive domain-specific language.
    /// #   (12:godot-nativescript-interface-usage)
    @resultBuilder
    enum Properties
    {
        /// static func Godot.NativeScriptInterface.Properties.buildExpression(_:)
        /// - declaration   :Property 
        /// - ->            :[Property]
        /// #   (0:$result-builder)
        static 
        func buildExpression(_ declaration:Property) -> [Property]
        {
            [declaration]
        }
        /// static func Godot.NativeScriptInterface.Properties.buildBlock(_:)
        /// - declarations  :[Property]...
        /// - ->            :[Property]
        /// #   (0:$result-builder)
        static 
        func buildBlock(_ declarations:[Property]...) -> [Property]
        {
            .init(declarations.joined())
        }
    }
    
    /// enum Godot.NativeScriptInterface.Members 
    ///     A group of nativescript interface declarations.
    enum Members 
    {
        /// case Godot.NativeScriptInterface.Members.signals(_:)
        /// - _ :[Signal]
        /// #   (0:)
        case signals    ([Signal])
        /// case Godot.NativeScriptInterface.Members.methods(_:)
        /// - _ :[Method]
        /// #   (1:)
        case methods    ([Method])
        /// case Godot.NativeScriptInterface.Members.properties(_:)
        /// - _ :[Property]
        /// #   (2:)
        case properties ([Property])
    }
    
    /// static func Godot.NativeScriptInterface.signals(_:)
    ///     Declares a group of signals.
    /// -   @Signals declarations:() -> [Signal]
    /// -   -> :Members 
    /// #   (20:godot-nativescript-interface-usage)
    static 
    func signals(@Signals _ declarations:() -> [Signal]) -> Members 
    {
        .signals(declarations())
    }
    /// static func Godot.NativeScriptInterface.methods(_:)
    ///     Declares a group of instance methods.
    /// -   @Methods declarations:() -> [Method]
    /// -   -> :Members 
    /// #   (21:godot-nativescript-interface-usage)
    static 
    func methods(@Methods _ declarations:() -> [Method]) -> Members 
    {
        .methods(declarations())
    }
    /// static func Godot.NativeScriptInterface.properties(_:)
    ///     Declares a group of instance properties.
    /// -   @Properties declarations:() -> [Property]
    /// -   -> :Members 
    /// #   (22:godot-nativescript-interface-usage)
    static 
    func properties(@Properties _ declarations:() -> [Property]) -> Members 
    {
        .properties(declarations())
    }
    
    /// static func Godot.NativeScriptInterface.buildExpression(_:)
    /// - group :Members 
    /// - ->    :[Members]
    /// #   (0:$result-builder)
    static 
    func buildExpression(_ group:Members) -> [Members]
    {
        [group]
    }
    /// static func Godot.NativeScriptInterface.buildBlock(_:)
    /// - groups:[Members]... 
    /// - ->    :[Members]
    /// #   (0:$result-builder)
    static 
    func buildBlock(_ groups:[Members]...) -> [Members]
    {
        .init(groups.joined())
    }
    /// static func Godot.NativeScriptInterface.buildFinalResult(_:)
    /// - groups:[Members]... 
    /// - ->    :Self
    /// #   (0:$result-builder)
    static 
    func buildFinalResult(_ groups:[Members]) -> Self 
    {
        return .init(
            properties: groups.flatMap 
            {
                (group:Members) -> [Property] in
                guard case .properties(let properties) = group 
                else 
                {
                    return [] 
                }
                return properties
            }, 
            methods: groups.flatMap 
            {
                (group:Members) -> [Method] in
                guard case .methods(let methods) = group 
                else 
                {
                    return [] 
                }
                return methods
            },
            signals: groups.flatMap 
            {
                (group:Members) -> [Signal] in
                guard case .signals(let signals) = group 
                else 
                {
                    return []
                }
                return signals
            })
    }
}

/// func (<-)<T, __, _>(method:symbol:)
/// where T:Godot.NativeScript, __:Godot.VariantRepresentable, _:Godot.VariantRepresentable 
///     Binds a method to a GDScript method name. This operator is a variadic-generic 
///     template. *Godot Swift* will synthesize overloads for arbitrary numbers 
///     and patterns of generic parameters as needed. 
/// - method:@escaping (T) -> (T.Delegate, __) -> _ 
///     A curried function, which can generate an instance method given an instance 
///     of [`T`].
/// - symbol:String 
///     The name to expose the method as in GDScript.
/// - ->    :Godot.NativeScriptInterface<T>.Method 
/// #   (0:binding-operators)

/// func (<-)<T, Value>(property:symbol:)
/// where T:Godot.NativeScript, Value:Godot.VariantRepresentable
///     Binds a property to a GDScript property name.
/// 
///     The property will be exported as a get-only property, even if the bound 
///     Swift property is mutable.
/// - property:KeyPath<T, Value>
///     A keypath to a property stored in an instance of [`T`].
/// - symbol:String 
///     The name to expose the property as in GDScript.
/// - ->    :Godot.NativeScriptInterface<T>.Property
/// #   (0:binding-operators)
/// #   (get)
func <- <T, Value>(property:KeyPath<T, Value>, symbol:String) 
    -> Godot.NativeScriptInterface<T>.Property
    where T:Godot.NativeScript, Value:Godot.VariantRepresentable
{
    (
        symbol:         symbol, 
        annotations:   .init(type: Value.variantType), 
        witness: 
        (
            get: 
            {
                (instance:T) -> Godot.Unmanaged.Variant in 
                
                .pass(retaining: instance[keyPath: property])
            }, 
            set: 
            {
                (_, _) in 
                
                Godot.print(error: "cannot assign to get-only property '\(symbol)'")
            }
        )
    )
} 
/// func (<-)<T, Value>(property:symbol:)
/// where T:Godot.NativeScript, Value:Godot.VariantRepresentable
///     Binds a property to a GDScript property name.
/// - property:ReferenceWritableKeyPath<T, Value>
///     A writable keypath to a property stored in an instance of [`T`].
/// - symbol:String 
///     The name to expose the property as in GDScript.
/// - ->    :Godot.NativeScriptInterface<T>.Property
/// #   (0:binding-operators)
/// #   (get-set)
func <- <T, Value>(property:ReferenceWritableKeyPath<T, Value>, symbol:String) 
    -> Godot.NativeScriptInterface<T>.Property
    where T:Godot.NativeScript, Value:Godot.VariantRepresentable
{
    (
        symbol:         symbol, 
        annotations:   .init(type: Value.variantType), 
        witness: 
        (
            get: 
            {
                (instance:T) -> Godot.Unmanaged.Variant in 
                
                .pass(retaining: instance[keyPath: property])
            }, 
            set: 
            {
                (instance:T, variant:Godot.Unmanaged.Variant) in 
                
                if let value:Value = variant.take(unretained: Value.self) 
                {
                    instance[keyPath: property] = value
                }
                else 
                {
                    Godot.print(error: .invalidArgument(
                        variant.take(unretained: Godot.Variant?.self), 
                        expected: Value.self))
                }
            }
        )
    )
} 

/// func (<-)<T, U>(accessor:label:)
/// where U:Godot.VariantRepresentable
///     Binds a signal parameter to a GDScript argument label.
/// - accessor:KeyPath<T, U>
///     A keypath to a parameter of type [`U`] stored in a signal value of type [`T`].
/// - label:String 
///     The label to expose the parameter as in GDScript.
/// - ->    :Godot.SignalInterface<T>.Argument 
/// #   (1:signal-binding-operators)
func <- <T, U>(accessor:KeyPath<T, U>, label:String) 
    -> Godot.SignalInterface<T>.Argument
    where U:Godot.VariantRepresentable
{
    (
        annotations: .init(label: label, type: U.variantType), 
        witness: 
        {
            (value:T) -> Godot.Unmanaged.Variant in
            
            .pass(retaining: value[keyPath: accessor])
        } 
    )
} 

extension Godot.SignalInterface
{
    /// static func Godot.SignalInterface.buildExpression(_:)
    /// - argument  :Argument 
    /// - ->        :[Argument]
    /// #   (0:$result-builder)
    static 
    func buildExpression(_ argument:Argument) -> [Argument]
    {
        [argument]
    }
    /// static func Godot.SignalInterface.buildBlock(_:)
    /// - arguments :[Argument]... 
    /// - ->        :[Argument]
    /// #   (0:$result-builder)
    static 
    func buildBlock(_ arguments:[Argument]...) -> [Argument]
    {
        .init(arguments.joined())
    }
    /// static func Godot.SignalInterface.buildFinalResult(_:)
    /// - arguments :[Argument] 
    /// - ->        :Self
    /// #   (0:$result-builder)
    static 
    func buildFinalResult(_ arguments:[Argument]) -> Self 
    {
        .init(arguments: arguments)
    }
} 
