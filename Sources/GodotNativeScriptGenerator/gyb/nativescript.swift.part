/// protocol Godot.NativeLibrary 
///     Declares the requirements that [`Godot.Library`] must satisfy. 
/// 
///     This protocol is provided for diagnostic purposes to help you complete 
///     the definition of the provided [`Godot.Library`] type. Conforming additional 
///     types to this protocol has no effect.
/// #   (0:godot-library-usage)
extension Godot 
{
    typealias NativeLibrary     = _GodotNativeLibrary 
}
protocol _GodotNativeLibrary 
{
    /// static var Godot.NativeLibrary.interface:Godot.Library.Interface { get }
    /// required
    static 
    var interface:Godot.Library.Interface 
    {
        get
    }
}

extension Godot 
{
    /// struct Godot.Library 
    /// :   Godot.NativeLibrary 
    ///     A Swift native library.
    /// 
    ///     When the Godot engine loads your Swift framework, it creates an instance 
    ///     of this type, and registers the nativescripts listed in its [`interface`].
    ///     
    ///     For your framework to compile, you must extend this type to 
    ///     provide the required library [`interface`]. 
    ///     A library interface consists of zero or more **type descriptors**. 
    ///     Create a type descriptor using the [`(<-)(type:symbol:)`] 
    ///     binding operator: 
    /**
            ```swift 
            MyExportedSwiftClass.self <- "MyExportedSwiftClass"
            ```
    **/
    ///     The [`Interface`] type is its own result builder, which provides a 
    ///     convenient syntax for defining library interfaces:
    /**
            ```swift 
            extension Godot.Library 
            {
                @Interface 
                static 
                var interface:Interface 
                {
                    MyExportedSwiftClass.self       <- "MyExportedSwiftClass"
                    MyOtherExportedSwiftClass.self  <- "MyOtherExportedSwiftClass"
                }
            }
            ```
    **/
    ///     It is acceptable for the same nativescript type to be bound to 
    ///     more than one GDScript class name. The Godot engine will register 
    ///     nativescripts under all of the class names they are bound to.
    /// 
    ///     *Godot Swift* also uses the nativescript declarations listed in the 
    ///     library [`interface`] to determine which types it should synthesize 
    ///     the [`(Godot.NativeScript).register(as:with:)`] requirement of 
    ///     [`Godot.NativeScript`] for. If you declare a conformance to 
    ///     [`Godot.NativeScript`], but do not add the conforming type to the 
    ///     library interface, your framework will most likely fail to compile 
    ///     due to missing protocol requirements. 
    /// 
    ///     > important:
    ///     *Godot Swift* will synthesize the [`(Godot.NativeScript).register(as:with:)`] 
    ///     method for *all* nativescript types declared in the library interface, 
    ///     even if the nativescript already has an implementation for this method. 
    ///     *Godot Swift* cannot override manual implementations of this method 
    ///     with its synthetic implementations, nor can it allow manual implementations 
    ///     to override its synthetic implementations. This means that compilation 
    ///     will fail (due to conflicting implementations) if any types declared 
    ///     in the library interface contain manual implementations of 
    ///     [`(Godot.NativeScript).register(as:with:)`]. 
    /// 
    ///     Manual [`Godot.NativeScript`] conformances are not currently supported.
    /// #   [See also](binding-operators)
    /// #   (1:godot-library-usage)
    /// #   (0:getting-started)
    struct Library:NativeLibrary 
    {
        private 
        let handle:UnsafeMutableRawPointer 
        
        fileprivate static
        func wrap(handle:UnsafeMutableRawPointer) -> Self
        {
            .init(handle: handle)
        }
    }
}
extension Godot.Library 
{    
    /// struct Godot.Library.Interface 
    /// @   resultBuilder
    ///     Specifies the nativescript types vended by this Swift library. 
    /// #   [See also](binding-operators)
    /// #   (2:godot-library-usage)
    @resultBuilder 
    struct Interface 
    {
        /// struct Godot.Library.Interface.NativeScriptType 
        ///     A nativescript type descriptor.
        /// 
        ///     Create a type descriptor using the [`(<-)(type:symbol:)`] 
        ///     binding operator: 
        /**
                ```swift 
                MyExportedSwiftClass.self <- "MyExportedSwiftClass"
                ```
        **/
        /// #   [See also](binding-operators)
        struct NativeScriptType  
        {
            var symbols:[String]
            let type:Any.Type 
            
            #if BUILD_STAGE_INERT
            let properties:Int
            let methods:[String]
            let signals:[String]
            #else 
            let register:([String], Godot.Library) -> ()
            #endif
            init<T>(type _:T.Type, symbol:String)
                where T:Godot.NativeScript
            {
                self.symbols    = [symbol]
                self.type       = T.self 
                #if BUILD_STAGE_INERT
                self.properties = T.interface.properties.count 
                self.methods    = T.interface.methods.map
                { 
                    "\($0)" 
                }
                self.signals    = T.interface.signals.map
                {
                    String.init(reflecting: $0.type)
                }
                #else 
                self.register   = 
                {
                    (symbols:[String], library:Godot.Library) in 
                    
                    T.register(as: symbols, with: library)
                }
                #endif 
            }
        }
        
        /// let Godot.Library.Interface.types:[NativeScriptType]
        ///     The type descriptors declared in this library interface. 
        ///
        ///     Each Swift type declared in this interface appears exactly once 
        ///     in this array, even if it was bound to more than one GDScript 
        ///     class name.
        let types:[NativeScriptType]
    }
    
    fileprivate 
    func initialize() 
    {
        #if !BUILD_STAGE_INERT
        for type:Interface.NativeScriptType in Self.interface.types 
        {
            type.register(type.symbols, self)
        }
        #endif
        
        // assert unsafebitcast memory layouts 
        MemoryLayout<godot_vector2>.assert()
        MemoryLayout<godot_vector3>.assert()
        MemoryLayout<godot_color>.assert()
        MemoryLayout<godot_quat>.assert()
        MemoryLayout<godot_plane>.assert()
        
        MemoryLayout<godot_rect2>.assert()
        MemoryLayout<godot_aabb>.assert()
        
        MemoryLayout<godot_transform2d>.assert()
        MemoryLayout<godot_transform>.assert()
        MemoryLayout<godot_basis>.assert() 
        
        MemoryLayout<godot_rid>.assert() 
        
        // assert variant type enum matches c headers 
        for (swift, c):(Godot.VariantType, godot_variant_type) in 
        [
            (.void,                 GODOT_VARIANT_TYPE_NIL),
        	(.bool,                 GODOT_VARIANT_TYPE_BOOL),
        	(.int,                  GODOT_VARIANT_TYPE_INT),
        	(.float,                GODOT_VARIANT_TYPE_REAL),
        	(.string,               GODOT_VARIANT_TYPE_STRING),
        	(.vector2,              GODOT_VARIANT_TYPE_VECTOR2),
            (.vector3,              GODOT_VARIANT_TYPE_VECTOR3),
            (.vector4,              GODOT_VARIANT_TYPE_COLOR),
        	(.rectangle2,           GODOT_VARIANT_TYPE_RECT2),
            (.rectangle3,           GODOT_VARIANT_TYPE_AABB),
        	(.affine2,              GODOT_VARIANT_TYPE_TRANSFORM2D),
            (.affine3,              GODOT_VARIANT_TYPE_TRANSFORM),
            (.linear3,              GODOT_VARIANT_TYPE_BASIS),
        	(.plane3,               GODOT_VARIANT_TYPE_PLANE),
        	(.quaternion,           GODOT_VARIANT_TYPE_QUAT),
        	(.nodePath,             GODOT_VARIANT_TYPE_NODE_PATH),
        	(.resourceIdentifier,   GODOT_VARIANT_TYPE_RID),
        	(.delegate,             GODOT_VARIANT_TYPE_OBJECT),
        	(.map,                  GODOT_VARIANT_TYPE_DICTIONARY),
        	(.list,                 GODOT_VARIANT_TYPE_ARRAY),
        	(.uint8Array,           GODOT_VARIANT_TYPE_POOL_BYTE_ARRAY),
        	(.int32Array,           GODOT_VARIANT_TYPE_POOL_INT_ARRAY),
        	(.float32Array,         GODOT_VARIANT_TYPE_POOL_REAL_ARRAY),
        	(.stringArray,          GODOT_VARIANT_TYPE_POOL_STRING_ARRAY),
        	(.vector2Array,         GODOT_VARIANT_TYPE_POOL_VECTOR2_ARRAY),
        	(.vector3Array,         GODOT_VARIANT_TYPE_POOL_VECTOR3_ARRAY),
        	(.vector4Array,         GODOT_VARIANT_TYPE_POOL_COLOR_ARRAY),
        ]
        {
            guard swift.value == c.rawValue
            else 
            {
                fatalError("Godot.VariantType enum raw value for '\(swift)' does not match definition in c headers. check version compatibility!")
            }
        }
    }
    fileprivate 
    func deinitialize() 
    {
    }
    
    func register<T>(
        initializer:godot_instance_create_func, 
        deinitializer:godot_instance_destroy_func, 
        for _:T.Type, as symbol:String) 
        where T:Godot.NativeScript
    {
        Godot.print("registering \(T.self) as nativescript 'Godot::\(symbol)'")
        
        Godot.api.nativescript.1.0.godot_nativescript_register_class(self.handle, 
            symbol, T.Delegate.symbol, initializer, deinitializer)
    }
    
    func register(signal:Any.Type, // this argument only used for debugging purposes
        in script:String, as symbol:String, annotations:[Godot.Annotations.Argument]) 
    {
        Godot.print("registering \(signal) as signal 'Godot::\(script)::\(symbol)'")
        
        var arguments:[godot_signal_argument] = annotations.map 
        {
            .init(
                name:          .init(packing: $0.label), 
                type:          .init($0.type.value), 
                hint:           GODOT_PROPERTY_HINT_NONE, 
                hint_string:   .init(packing: ""), 
                usage:          GODOT_PROPERTY_USAGE_DEFAULT, 
                default_value: .init())
        }
        arguments.withUnsafeMutableBufferPointer 
        {
            var descriptor:godot_signal = .init(name: .init(packing: symbol), 
                num_args:           .init($0.count), 
                args:               $0.baseAddress, 
                num_default_args:   0, 
                default_args:       nil)
            
            withUnsafePointer(to: descriptor) 
            {
                Godot.api.nativescript.1.0
                    .godot_nativescript_register_signal(self.handle, script, $0)
            }
            
            descriptor.name.deinit()
        }
        for i:Int in arguments.indices 
        {
            arguments[i].name.deinit()
            arguments[i].hint_string.deinit()
        } 
    }
    
    func register(method:godot_instance_method, 
        in script:String, as symbol:String, annotations:[Godot.Annotations.Argument]) 
    {
        Godot.print("registering (function) as method 'Godot::\(script)::\(symbol)'")
        
        let attributes:godot_method_attributes = .init(
            rpc_type: GODOT_METHOD_RPC_MODE_DISABLED)
        Godot.api.nativescript.1.0.godot_nativescript_register_method(self.handle, 
            script, symbol, attributes, method)
    }
    
    func register(property:(get:godot_property_get_func, set:godot_property_set_func), 
        in script:String, as symbol:String, annotations:Godot.Annotations.Property) 
    {
        Godot.print("registering (function) as property 'Godot::\(script)::\(symbol)'")
        
        var attributes:godot_property_attributes = .init(
            rset_type:          GODOT_METHOD_RPC_MODE_DISABLED, 
            type:              .init(annotations.type.value), 
            hint:               GODOT_PROPERTY_HINT_NONE,
            hint_string:       .init(packing: ""), 
            usage:              GODOT_PROPERTY_USAGE_DEFAULT, 
            default_value:     .init())
        
        Godot.api.nativescript.1.0.godot_nativescript_register_property(self.handle, 
            script, symbol, &attributes, property.set, property.get)
        
        attributes.hint_string.deinit()
    }
}

extension Godot 
{
    enum Annotations 
    {
        struct Argument 
        {
            let label:Swift.String 
            let type:Godot.VariantType
        }
        struct Property 
        {
            let type:Godot.VariantType
        }
    }
}
/// protocol Godot.NativeScript 
///     A Swift nativescript.
/// 
///     Any Swift type (`class`, `struct`, `enum`) can be used as a 
///     nativescript by conforming it to this protocol. 
/// 
///     At a minimum, a conforming type must support an [`init(delegate:)`] 
///     initializer, which will be called when this nativescript is instantiated, 
///     and attached to an instance of its associated [`Delegate`] type.
/// 
///     You can register signals, properties, and methods to make them accessible 
///     from GDScript, by specifying a nativescript [`Interface`]. 
///     A nativescript interface consists of zero or more **signal descriptors**, 
///     **method descriptors**, or **property descriptors**. The default interface 
///     is an empty interface which exports no symbols.
/// 
///     Declare signals using the [`Interface.signals(_:)`] method. The closure  
///     argument of this method is transformed by the [`Interface.Signals`] result 
///     builder, and it accepts zero or more [`Godot.Signal`] metatypes. 
/**
        ```swift 
        Interface.signals 
        {
            ExampleSignal.self 
            AnotherSignal.self 
        }
        ```
**/
///     > note: 
///     Signal descriptors are not written with a `<-` binding operator because 
///     the GDScript name of a signal is specified by its [`(Godot.Signal).name`]
///     property. 
///     
///     Declare instance methods using the [`Interface.methods(_:)`] method. Its 
///     closure argument is transformed by the [`Interface.Methods`] result builder, 
///     and it accepts zero or more method descriptors. Create a method descriptor 
///     using the templated [`(<-)(method:symbol:)`] binding operator. 
/**
        ```swift 
        Interface.methods 
        {
            exampleMethod(delegate:foo:)        <- "example_method"
            anotherMethod(delegate:foo:bar:)    <- "another_method"
        }
        ```
**/
///     > note: 
///     If `exampleMethod(delegate:foo:)` is an instance method of [`Self`], then 
///     the `exampleMethod(delegate:foo:)` expression in the above example refers 
///     to a *curried* static method on [`Self`]. 
/// 
///     The first parameter of any exported nativescript instance method must 
///     be labeled `delegate:` and have the static type [`Delegate`]. As its name 
///     suggests, this parameter provides the nativescript’s means of interacting 
///     with the game engine.
/// 
///     > warning: 
///     Nativescript delegates are only guaranteed to be alive for the duration 
///     of the instance method call. A Swift nativescript may outlive, or become 
///     detached from its original delegate. This is especially important for 
///     unmanaged delegate types, such as [`Unmanaged.Node`].
/// 
///     The bound functions do not have to be member functions of [`Self`]; any 
///     function with an appropriate signature can be registered in a nativescript 
///     interface.
/// 
///     Declare instance properties using the [`Interface.properties(_:)`] method. 
///     Its closure argument is transformed by the [`Interface.Properties`] 
///     result builder, and it accepts zero or more property descriptors. 
///     Create a property descriptor using the [`(<-)(property:symbol:)#(get)`]
///     binding operator. 
/**
        ```swift 
        Interface.properties  
        {
            \.exampleProperty               <- "example_property"
            \.anotherProperty               <- "another_property"
        }
        ```
**/
///     If [`Self`] is a Swift class, you can register mutable properties using 
///     the [`(<-)(property:symbol:)#(get-set)`] overload, which takes 
///     a [`ReferenceWritableKeyPath`] for its left-hand operand. The Swift type 
///     inferencer will prefer this overload if possible.
///     
///     The [`Interface`] type is its own result builder, which provides a 
///     convenient syntax for declaring groups of signals, methods, and properties.
/**
        ```swift 
        @Interface 
        static 
        var interface:Interface 
        {
            Interface.signals 
            {
                ExampleSignal.self 
                AnotherSignal.self 
            }
            Interface.methods 
            {
                exampleMethod(delegate:foo:)        <- "example_method"
                anotherMethod(delegate:foo:bar:)    <- "another_method"
            }
            Interface.properties  
            {
                \.exampleProperty                   <- "example_property"
                \.anotherProperty                   <- "another_property"
            }
        }
        ```
**/
///     You can declare more than one group of signals, methods, or properties, 
///     and the member groups can appear in any order. 
/// 
///     Signals cannot occur more than once per nativescript interface. However, 
///     methods and properties can be bound to more than one GDScript symbol. 
/// 
///     > important: 
///     If more than one method or property is bound to the *same* GDScript symbol, 
///     only the last declaration will be used.
///
///     This protocol has a synthetic [`register(as:with:)`] requirement. 
///     *Godot Swift* will only synthesize an implementation for this requirement  
///     if [`Self`] is listed in the [`(Godot.Library).interface`] of [`Godot.Library`].
/// #   [See also](binding-operators)
/// #   (0:godot-nativescript-usage)
/// #   (1:getting-started)
extension Godot 
{
    typealias NativeScript = _GodotNativeScript
}
protocol _GodotNativeScript
{
    /// typealias Godot.NativeScript.Interface = Godot.NativeScriptInterface<Self>
    typealias Interface = Godot.NativeScriptInterface<Self>
    /// associatedtype Godot.NativeScript.Delegate 
    /// where Delegate:Godot.AnyDelegate
    ///     The delegate type this nativescript type is meant to be attached to.
    associatedtype Delegate:Godot.AnyDelegate
    
    /// init Godot.NativeScript.init(delegate:)
    /// required 
    ///     Initializes the script state of an instance of this nativescript type.
    /// - delegate:Delegate 
    ///     The delegate instance this nativescript is attached to.
    init(delegate:Delegate)
    /// static var Godot.NativeScript.interface:Interface { get }
    /// defaulted 
    ///     Specifies the signals, properties, and methods that this nativescript 
    ///     makes available to GDScript.
    /// 
    ///     The default interface exports no GDScript symbols, besides the 
    ///     mandatory initializer.
    static 
    var interface:Interface
    {
        get
    }
    /// static func Godot.NativeScript.register(as:with:)
    /// synthesized 
    ///     Registers this nativescript type with the Godot engine under the 
    ///     given GDScript class names. 
    /// 
    ///     Do not manually implement this method for types declared in 
    ///     the library [`(Godot.Library).Interface`]. However, it may be useful 
    ///     to define an implementation stub for this method while prototyping.
    /// - symbols:[Swift.String]
    ///     The GDScript class names to register this nativescript as.
    /// - library:Godot.Library 
    #if !BUILD_STAGE_INERT 
    static 
    func register(as symbols:[String], with library:Godot.Library)
    #endif 
}
extension Godot.NativeScript 
{
    static 
    var interface:Interface 
    {
        .init(properties: [], methods: [], signals: [])
    }
}

extension Godot 
{
    /// struct Godot.NativeScriptInterface<T> 
    /// where T:Godot.NativeScript
    /// @   resultBuilder
    ///     Specifies the signals, instance methods, and instance properties 
    ///     vended by [`T`].
    /// #   [Defining an interface](godot-nativescript-interface-usage)
    /// #   [See also](binding-operators)
    /// #   (1:godot-nativescript-usage)
    @resultBuilder
    struct NativeScriptInterface<T> where T:Godot.NativeScript
    {
        enum Witness 
        {
            typealias Get = (T) -> Godot.Unmanaged.Variant
            typealias Set = (T,    Godot.Unmanaged.Variant) -> ()
            
            typealias Property  = (get:Get, set:Set) 
            typealias Method    = (T, T.Delegate, Godot.VariadicArguments) -> Godot.Unmanaged.Variant
        }
        /// struct Godot.NativeScriptInterface.Signal 
        ///     A signal descriptor.
        /// #   (0:)
        
        /// struct Godot.NativeScriptInterface.Method 
        ///     An instance method descriptor.
        /// 
        ///     Create a method descriptor 
        ///     using the templated [`(<-)(method:symbol:)`] binding operator. 
        /**
                ```swift 
                exampleMethod(delegate:foo:) <- "example_method"
                ```
        **/
        /// #   (1:)
        
        /// struct Godot.NativeScriptInterface.Property
        ///     An instance property descriptor.
        /// 
        ///     Create a get-only property descriptor using the 
        ///     [`(<-)(property:symbol:)#(get)`] binding operator. 
        /**
                ```swift 
                \.exampleProperty <- "example_property"
                }
                ```
        **/
        ///     Use the [`(<-)(property:symbol:)#(get-set)`] overload to create 
        ///     a settable property descriptor.
        /// #   (2:)
        typealias Signal    = 
        (
            symbol:Swift.String, 
            annotations:[Annotations.Argument], 
            type:Any.Type 
        )
        #if BUILD_STAGE_INERT
        typealias Method    = Any.Type
        #else 
        typealias Method    = 
        (
            symbol:Swift.String,
            annotations:[Annotations.Argument],
            witness:Witness.Method
        )
        #endif
        typealias Property  = 
        (
            symbol:Swift.String,
            annotations:Annotations.Property,
            witness:Witness.Property 
        )
        
        /// let Godot.NativeScriptInterface.signals:[Signal]
        ///     The signal descriptors declared in this library interface. 
        /// #   (0:)
        let signals:[Signal]
        /// var Godot.NativeScriptInterface.methods:[Method] { get }
        ///     The method descriptors declared in this library interface. 
        /// #   (1:)
        private(set)
        var methods:[Method]
        /// var Godot.NativeScriptInterface.properties:[Property] { get }
        ///     The property descriptors declared in this library interface. 
        /// #   (2:)
        private(set)
        var properties:[Property]
        
        init(properties:[Property], methods:[Method], signals:[Signal])
        {
            self.properties = properties 
            self.methods    = methods
            self.signals    = signals
        }
        
        subscript(property index:Int) -> Property 
        {
            _read
            {
                yield self.properties[index]
            }
        }
        subscript(method index:Int) -> Method 
        {
            _read 
            {
                yield self.methods[index]
            }
        }
    }
}

extension Godot 
{
    typealias Signal = _GodotSignal
}
/// protocol Godot.Signal 
///     A type specifying the name and format of a Godot signal.
/// 
///     A signal type must provide a signal [`name`] and an [`interface`] 
///     specifying how fields are read from an instance of the associated 
///     [`Value`] type. A signal interface consists of zero or more 
///     **argument descriptors**. Create an argument descriptor using the 
///     [`(<-)(accessor:label:)`] binding operator. 
/**
        ```swift 
        \.foo <- "foo"
        ```
**/
///     The [`Interface`] type is its own result builder, which provides a 
///     convenient syntax for declaring signal fields. The following example 
///     defines a signal named `"my_signal"` with two fields, of types [`Int`] 
///     and [`Float64`]:
/**
        ```swift 
        enum MySignal:Godot.Signal 
        {
            typealias Value = (foo:Int, bar:Float64)
            
            @Interface 
            static 
            var interface:Interface 
            {
                \.foo <- "foo"
                \.bar <- "bar"
            }
            static 
            var name:String 
            {
                "my_signal"
            }
        }
        ```
**/
///     You can emit a signal from a delegate by calling its 
///     [`(AnyDelegate).emit(signal:as:)`] method.
/// 
///     Signal listeners will receive signal arguments in the order that 
///     that the corresponding signal fields are declared in the signal interface.
/// #   (0:godot-signal-usage)
protocol _GodotSignal  
{
    /// typealias Godot.Signal.Interface = Godot.SignalInterface<Value> 
    typealias Interface = Godot.SignalInterface<Value>
    
    /// associatedtype Godot.Signal.Value 
    ///     An arbitrary type which can be used with [`Godot.AnyDelegate.emit(signal:as:)`].
    associatedtype Value 
    
    /// static var Godot.Signal.name:Swift.String { get }
    /// required 
    ///     The name of this signal type, as seen by Godot.
    static 
    var name:Swift.String
    {
        get
    } 
    /// static var Godot.Signal.interface:Interface { get }
    /// required 
    ///     The interface of this signal type, specifying how signal fields 
    ///     are read from an instance of [[`Value`]]. 
    static 
    var interface:Interface
    {
        get
    } 
}
extension Godot.Signal 
{
    static 
    var annotations:[Godot.Annotations.Argument]
    {
        Self.interface.arguments.map(\.annotations)
    } 
} 
extension Godot 
{
    /// struct Godot.SignalInterface<T> 
    /// @   resultBuilder 
    ///     Specifies how signal fields are read from an instance of [`T`].
    /// #   [See also](signal-binding-operators)
    /// #   (1:godot-signal-usage)
    @resultBuilder
    struct SignalInterface<T> 
    {
        /// struct Godot.SignalInterface.Argument 
        ///     A signal argument descriptor.
        /// 
        ///     Create an argument descriptor using the 
        ///     [`(<-)(accessor:label:)`] binding operator. 
        /**
                ```swift 
                \.foo <- "foo"
                ```
        **/
        typealias Argument =
        (
            annotations:Annotations.Argument, 
            witness:(T) -> Godot.Unmanaged.Variant 
        )
        
        /// let Godot.SignalInterface.arguments:[Argument]
        ///     The argument descriptors declared in this signal interface. 
        let arguments:[Argument]
    } 
}

// arc sanitizer 
extension Godot 
{
    final 
    class NativeScriptMetadata
    {
    #if ENABLE_ARC_SANITIZER
        
        private 
        let tracker:RetainTracker 
        let symbol:Swift.String
        
        init(symbol:Swift.String, tracker:RetainTracker)
        {
            self.symbol     = symbol
            self.tracker    = tracker
        }
        
        func track() 
        {
            self.tracker.table[self.symbol]?.wrappingIncrement(ordering: .relaxed)
        }
        func untrack() 
        {
            self.tracker.table[self.symbol]?.wrappingDecrement(ordering: .relaxed)
        }
        
    #else 
        
        let symbol:Swift.String
        
        init(symbol:Swift.String)
        {
            self.symbol = symbol
        }
    
    #endif 
    }
}
#if ENABLE_ARC_SANITIZER
extension Godot 
{
    final 
    class RetainTracker 
    {
        private 
        let type:Any.Type
        var table:[Swift.String: ManagedAtomic<Int>] 
        
        init(type:Any.Type, symbols:[Swift.String]) 
        {
            self.type   = type 
            self.table  = .init(uniqueKeysWithValues: symbols.map{ ($0, .init(0)) })
        }
        deinit 
        {
            func plural(_ count:Int) -> Swift.String 
            {
                count == 1 ? "\(count) leaked instance" : "\(count) leaked instances"
            }
            
            let leaked:[Swift.String: Int] = self.table.compactMapValues 
            {
                let count:Int = $0.load(ordering: .relaxed)
                return count != 0 ? count : nil
            }
            if !leaked.isEmpty 
            {
                Godot.print(warning: 
                    """
                    detected \(plural(leaked.values.reduce(0, +))) of \(Swift.String.init(reflecting: self.type)):
                    \(leaked.sorted{ $0.key < $1.key }.map
                    { 
                        "    \(plural($0.value)) of '\($0.key)'" 
                    }.joined(separator: "\n"))
                    """)
            }
        }
    }
}
#endif 
