extension Godot 
{
    /// class Godot.List
    /// :   Godot.Variant 
    /// :   RandomAccessCollection 
    /// :   MutableCollection
    /// :   ExpressibleByArrayLiteral
    /// final 
    ///     A heterogenous collection of variant values.
    /// 
    ///     This type corresponds to the 
    ///     [`Godot::Array`](https://docs.godotengine.org/en/stable/classes/class_array.html) 
    ///     type in GDScript.
    /// 
    ///     Despite its name, the `Godot::Array` type is semantically equivalent 
    ///     to an `inout` Swift tuple, and in many situations, *Godot Swift* allows 
    ///     you to bridge `Godot::Array`’s directly to Swift tuple types, without 
    ///     having to go through [`List`] intermediates.
    /// 
    ///     > warning:
    ///     Do not confuse [`Godot.List`] with [`Godot.Array`]. 
    ///     The [`Godot.Array`] type corresponds to the *pooled* array types 
    ///     in GDScript.
    /// 
    ///     This type is an opaque wrapper around a `Godot::Array` object, 
    ///     and it supports no functionality other than minimal conformances 
    ///     to [`RandomAccessCollection`] and [`MutableCollection`]. 
    ///     The main purpose of this type is to allow lists and variant existentials 
    ///     to be moved or subscripted without copying the entire underlying list 
    ///     buffer, in situations where it is not necessary to interact with all 
    ///     of the actual elements of the list.
    ///
    ///     The [`Element`] type of a [`List`] is a [[`Godot.Variant?`]] existential. 
    ///     (Note the double optional returned by the [`Collection`first`] property.)
    /**     
            ```swift 
            let list:Godot.List         = ... 
            let element:Godot.Variant?? = list.first 
            ```
    **/
    ///     Instances of [`List`] have reference semantics. 
    ///     (Note the `let` declaration, as opposed to a `var` declaration.)
    /**     
            ```swift 
            let list:Godot.List     = ... 
            list[list.startIndex]   = nil 
            ```
    **/
    ///     Create a list with capacity for a specified number of elements using 
    ///     the [`init(count:)`] convenience initializer:
    /**     
            ```swift 
            let count:Int       = ...
            let list:Godot.List = .init(count: count)
            ```
    **/
    ///     > note: 
    ///     This initializer is called [`init(count:)`] and not 
    ///     `init(capacity:)`, because all list elements are initialized — to `nil`. 
    ///     Godot has no concept of uninitialized list memory.
    ///
    ///     You can also dynamically resize a list using the [`resize(to:)`] method.
    /**     
            ```swift 
            let count:Int       = ...
            let list:Godot.List = .init()
            list.resize(to: count)
            ```
    **/
    ///     All newly-allocated positions in a list are initialized to `nil`.
    /// 
    ///     The [`List`] type is [`ExpressibleByArrayLiteral`].
    /**     
            ```swift 
            let list:Godot.List = 
            [
                nil  as Godot.Variant?, 
                3.14 as Godot.Variant?,
                5    as Godot.Variant?
            ]
            ```
    **/
    ///     You can convert a [[`List`]] to a [[`[Godot.Variant?]`]] array, just 
    ///     like any other Swift [`Sequence`].
    /**     
            ```swift 
            let list:Godot.List             = ... 
            let variants:[Godot.Variant?]   = .init(list)
            ```
    **/
    ///     Instances of [`List`] are memory-managed by Swift. When a list is 
    ///     deinitialized by the Swift runtime, all of its elements are also deinitialized.
    /// #   [Creating lists](godot-list-initializer-usage)
    /// #   [Creating lists from unmanaged values](godot-list-manual-memory-management)
    /// #   [Resizing lists](godot-list-resize-usage)
    /// #   [Accessing list elements](godot-list-element-access)
    /// #   (14:godot-core-types)
    /// #   (14:)
    final 
    class List 
    {
        private 
        var core:godot_array
        
        fileprivate 
        init(retained core:godot_array) 
        {
            self.core = core
        }
        
        private 
        init(with initializer:(UnsafeMutablePointer<godot_array>) -> ()) 
        {
            self.core = .init(with: initializer)
        }
        
        deinit 
        {
            self.core.deinit()
        }
    }
}

extension Godot.List:RandomAccessCollection, MutableCollection, ExpressibleByArrayLiteral
{
    /// convenience init Godot.List.init()
    ///     Creates an empty list.
    /// #   (0:godot-list-initializer-usage)
    convenience 
    init() 
    {
        self.init(with: Godot.api.1.0.godot_array_new)
    }
    /// convenience init Godot.List.init(count:)
    ///     Creates a list with `count` elements, all initialized to `nil`.
    /// - count:Int 
    /// #   (0:godot-list-initializer-usage)
    convenience 
    init(count:Int) 
    {
        self.init()
        self.resize(to: count)
    }
    /// convenience init Godot.List.init<C>(_:)
    /// where C:Collection, C.Element == Godot.Variant?
    ///     Initializes a list from the given variants.
    /// 
    ///     After calling this initializer, each variant element is retained 
    ///     to reflect the fact that this list instance now holds a strong reference 
    ///     to it. This does not affect variant elements holding unmanaged values, 
    ///     such as [`Unmanaged.Node`] instances.
    /// - elements:C 
    ///     A collection containing the elements to form the list from.
    /// #   (1:godot-list-initializer-usage)
    convenience 
    init<C>(_ elements:C) where C:Collection, C.Element == Godot.Variant?
    {
        self.init(count: elements.count)
        for (i, element):(Int, Godot.Variant?) in elements.enumerated()
        {
            // it should be okay to assign here because godot default-initializes 
            // the array elements to void’s
            self[i] = element
        }
    }
    /// convenience init Godot.List.init(arrayLiteral:)
    /// ?:  ExpressibleByArrayLiteral
    ///     Creates a list from an array literal.
    /// 
    ///     After calling this initializer, each variant element is retained 
    ///     to reflect the fact that this list instance now holds a strong reference 
    ///     to it. This does not affect variant elements holding unmanaged values, 
    ///     such as [`Unmanaged.Node`] instances.
    /// - elements:Godot.Variant?...
    /// #   (1:godot-list-initializer-usage)
    convenience 
    init(arrayLiteral elements:Godot.Variant?...) 
    {
        self.init(elements)
    }
    /// convenience init Godot.List.init<C>(moving:)
    /// where C:Collection, C.Element == Unmanaged.Variant
    ///     Move-initializes a list from the given unmanaged variants.
    /// 
    ///     This initializer transfers ownership of the variant elements to the 
    ///     newly-initialized list instance. When the list is deinitialized, 
    ///     all of its elements will be deinitialized as well, which means that 
    ///     the original unmanaged variant values will no longer be valid. 
    /// - elements:C 
    /// #   (0:godot-list-manual-memory-management)
    convenience 
    init<C>(moving elements:C) where C:Collection, C.Element == Godot.Unmanaged.Variant
    {
        self.init(count: elements.count)
        withExtendedLifetime(self) 
        {
            for (i, unmanaged):(Int, Godot.Unmanaged.Variant) in elements.enumerated()
            {
                // it should be okay to initialize here (the `=` operator does a 
                // trivial bit copy, so it does not actually do an assignment)
                // because the existing array elements should all be void’s, 
                // which do not require deinitialization
                self[unmanaged: i] = unmanaged 
            }
        }
    }
    /// convenience init Godot.List.init<C>(moving:)
    ///     Move-initializes a list from the given unmanaged variants.
    /// 
    ///     This initializer transfers ownership of the variant elements to the 
    ///     newly-initialized list instance. When the list is deinitialized, 
    ///     all of its elements will be deinitialized as well, which means that 
    ///     the original unmanaged variant values will no longer be valid. 
    /// - elements:Unmanaged.Variant...
    /// #   (0:godot-list-manual-memory-management)
    convenience 
    init(moving elements:Godot.Unmanaged.Variant...)
    {
        self.init(moving: elements)
    }
    
    /// func Godot.List.resize(to:)
    ///     Resizes this list to the given length.
    /// 
    ///     Any new element positions will be initialized to `nil`.
    /// - count:Int 
    ///     The length to resize this list to.
    /// #   (0:godot-list-resize-usage)
    func resize(to count:Int) 
    {
        withExtendedLifetime(self) 
        {
            Godot.api.1.0.godot_array_resize(&self.core, .init(count))
        }
    }
    /// var Godot.List.startIndex:Int { get }
    /// ?:  RandomAccessCollection 
    /// #   (0:godot-list-element-access)
    var startIndex:Int 
    {
        0
    }
    /// var Godot.List.endIndex:Int { get }
    /// ?:  RandomAccessCollection 
    /// #   (0:godot-list-element-access)
    var endIndex:Int 
    {
        withExtendedLifetime(self)
        {
            .init(withUnsafePointer(to: self.core, Godot.api.1.0.godot_array_size))
        }
    }
    
    /// subscript Godot.List[_:] { get set }
    /// ?:  RandomAccessCollection 
    /// ?:  MutableCollection
    ///     Accesses the list element at the given index. 
    /// - index :Int 
    ///     The index of the element to access, which must be in the valid 
    ///     index range of this list. Subscripting with out-of-range indices is an error.
    /// - ->    :Godot.Variant?
    /// #   (1:godot-list-element-access)
    subscript(index:Int) -> Godot.Variant? 
    {
        get 
        {
            withExtendedLifetime(self) 
            {
                self[unmanaged: index].take(unretained: Godot.Variant?.self) 
            }
        }
        set(value) 
        {
            withExtendedLifetime(self) 
            {
                // deinitialize the existing value 
                self[unmanaged: index].assign(retaining: value)
            }
        }
    } 
    
    // this subscript does not retain the variants! callers *must* surround it 
    // with a `withExtendedLifetime(_:)` fence!
    private 
    subscript(unmanaged index:Int) -> Godot.Unmanaged.Variant 
    {
        get 
        {
            withUnsafePointer(to: self.core)
            {
                guard let pointer:UnsafePointer<godot_variant> = 
                    Godot.api.1.0.godot_array_operator_index_const($0, .init(index))
                else 
                {
                    fatalError("nil pointer to list element (\(index))")
                }
                
                return UnsafeRawPointer.init(pointer)
                    .load(as: Godot.Unmanaged.Variant.self)
            }
        }
        set(value)
        {
            guard let pointer:UnsafeMutablePointer<godot_variant> = 
                Godot.api.1.0.godot_array_operator_index(&self.core, .init(index))
            else 
            {
                fatalError("nil pointer to list element (\(index))")
            }
            
            UnsafeMutableRawPointer.init(pointer)
                .storeBytes(of: value, as: Godot.Unmanaged.Variant.self)
        } 
    } 
    
    /// func Godot.List.take<T>(unretained:at:)
    /// where T:VariantRepresentable 
    ///     Attempts to load the element at the given index as the specified type.
    /// - type  :T.Type 
    /// - index :Int 
    ///     The index of the element to access, which must be in the valid 
    ///     index range of this list. Passing an out-of-range index is an error.
    /// - ->    :T?
    ///     An instance of [`T`], if it was possible to load it from the variant 
    ///     value at `index`; otherwise `nil`.
    /// #   (1:godot-list-element-access)
    func take<T>(unretained _:T.Type, at index:Int) -> T? 
        where T:Godot.VariantRepresentable 
    {
        withExtendedLifetime(self) 
        {
            self[unmanaged: index].take(unretained: T.self) 
        }
    } 
    /// func Godot.List.take(unretained:at:)
    ///     Attempts to load the element at the given index as an instance of [`Void`].
    /// 
    ///     Don’t confuse the `nil` case of [[`Void?`]] returned by this 
    ///     method with the `nil` case of [[`Godot.Variant?`]] returned by the 
    ///     [`[_:]`] subscript. This method returns a non-nil value of `()` when 
    ///     the corresponding variant value is `nil`, because the `nil` case of 
    ///     a [[`Godot.Variant?`]] value represents a value of type [`Void`].
    /// - type  :Void.Type 
    /// - index :Int 
    ///     The index of the element to access, which must be in the valid 
    ///     index range of this list. Passing an out-of-range index is an error.
    /// - ->    :Void?
    ///     An instance of [`Void`], if the variant value at `index` was a null variant; 
    ///     otherwise `nil`.
    /// #   (1:godot-list-element-access)
    func take(unretained _:Void.Type, at index:Int) -> Void? 
    {
        withExtendedLifetime(self) 
        {
            self[unmanaged: index].take(unretained: Void.self) 
        }
    } 
    /// func Godot.List.assign<T>(retaining:at:)
    /// where T:VariantRepresentable 
    ///     Assigns the given value to the list element at the given index.
    /// - value :T 
    ///     The value to assign. 
    /// - index :Int 
    ///     The index of the element to access, which must be in the valid 
    ///     index range of this list. Passing an out-of-range index is an error.
    /// #   (2:godot-list-element-access)
    func assign<T>(retaining value:T, at index:Int) 
        where T:Godot.VariantRepresentable 
    {
        withExtendedLifetime(self) 
        {
            self[unmanaged: index].assign(retaining: value) 
        }
    } 
    /// func Godot.List.assign(retaining:at:)
    ///     Assigns a [`Void`] value to the list element at the given index.
    /// 
    ///     This method is equivalent to assigning `nil` through the  
    ///     [`[_:]`] subscript, but is slightly more efficient.
    /// - value :Void 
    ///     An empty tuple. 
    /// - index :Int 
    ///     The index of the element to access, which must be in the valid 
    ///     index range of this list. Passing an out-of-range index is an error.
    /// #   (2:godot-list-element-access)
    func assign(retaining value:Void, at index:Int) 
    {
        withExtendedLifetime(self) 
        {
            self[unmanaged: index].assign(retaining: value) 
        }
    } 
}
