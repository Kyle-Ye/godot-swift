extension Godot 
{
    enum DynamicCallError
    {
        case invalidArgument(Godot.Variant?, expected:Any.Type)
        case invalidArgumentTuple(Int, expected:Any.Type)
        case invalidArgumentCount(Int, expected:Int)
    }
}
extension Godot.DynamicCallError 
{
    var description:String 
    {
        switch self 
        {
        case .invalidArgumentCount(let count, expected: let expected):
            if count < expected
            {
                let positions:String = (count ..< expected).map{ "#\($0)" }.joined(separator: ",")
                return "missing arguments for parameter\(expected - count > 1 ? "s" : "") \(positions) in call"
            }
            else 
            {
                let positions:String = (expected ..< count).map{ "#\($0)" }.joined(separator: ",")
                return "extra arguments at positions\(count - expected > 1 ? "s" : "") \(positions) in call"
            }
        case .invalidArgumentTuple(let count, expected: let expected):
            return "cannot convert Godot.List with \(count) elements to expected argument type '\(String.init(reflecting: expected))'"
        case .invalidArgument(let value, expected: let expected):
            let reflection:String = value.map{ String.init(reflecting: type(of: $0)) } ?? "Void"
            return "cannot convert value of type '\(reflection)' to expected argument type '\(String.init(reflecting: expected))'"
        }
    }
}

extension Godot
{
    fileprivate 
    typealias API = 
    (
        Swift.Void,
        (
            godot_gdnative_core_api_struct, 
            godot_gdnative_core_1_1_api_struct, 
            godot_gdnative_core_1_2_api_struct
        ),
        nativescript:
        (
            swift:Int32, // language index
            (
                godot_gdnative_ext_nativescript_api_struct, 
                godot_gdnative_ext_nativescript_1_1_api_struct
            )
        )
    )
    
    fileprivate private(set) static 
    var api:API = ( (), (.init(), .init(), .init()), (-1, (.init(), .init())) )
    
    private static 
    func version(from head:godot_gdnative_api_struct) -> (major:Int, minor:Int)
    {
        // find the highest api version available 
        var version:godot_gdnative_api_version = head.version
        var next:UnsafePointer<godot_gdnative_api_struct>? = head.next 
        while let current:UnsafePointer<godot_gdnative_api_struct> = next 
        {
            version = current.pointee.version
            next    = current.pointee.next
        }
        return (.init(version.major), .init(version.minor))
    }
    
    private static 
    func loadCoreAPI(head:godot_gdnative_core_api_struct) 
        -> 
        (
            godot_gdnative_core_api_struct, 
            godot_gdnative_core_1_1_api_struct, 
            godot_gdnative_core_1_2_api_struct
        )
    {
        guard   let v1_1:UnsafePointer<godot_gdnative_api_struct> = head.next, 
                let v1_2:UnsafePointer<godot_gdnative_api_struct> = v1_1.pointee.next 
        else 
        {
            let (major, minor):(Int, Int) = withUnsafeBytes(of: head)
            {
                Self.version(from: $0.load(as: godot_gdnative_api_struct.self))
            }
            fatalError("godot-swift requires gdnative version 1.2 or higher (have version \(major).\(minor))")
        }
        
        return 
            (
            head,
            UnsafeRawPointer.init(v1_1).load(as: godot_gdnative_core_1_1_api_struct.self),
            UnsafeRawPointer.init(v1_2).load(as: godot_gdnative_core_1_2_api_struct.self)
            )
    }
    
    private static 
    func loadNativeScriptAPI(head:UnsafePointer<godot_gdnative_api_struct>) 
        -> 
        (
            godot_gdnative_ext_nativescript_api_struct, 
            godot_gdnative_ext_nativescript_1_1_api_struct 
        )
    {
        guard   let v1_1:UnsafePointer<godot_gdnative_api_struct> = head.pointee.next 
        else 
        {
            let (major, minor):(Int, Int) = Self.version(from: head.pointee)
            fatalError("godot-swift requires gdnative nativescript version 1.1 or higher (have version \(major).\(minor))")
        }
        
        return 
            (
            UnsafeRawPointer.init(head).load(as: godot_gdnative_ext_nativescript_api_struct.self),
            UnsafeRawPointer.init(v1_1).load(as: godot_gdnative_ext_nativescript_1_1_api_struct.self)
            )
    }
    
    fileprivate static 
    func initialize(api head:godot_gdnative_core_api_struct) 
    {
        // gather extensions 
        var extensions:
        (
            nativescript:UnsafePointer<godot_gdnative_api_struct>?, 
            Swift.Void
        ) 
        = 
        (nil, ())
        for i:Int in 0 ..< Int.init(head.num_extensions)
        {
            switch (head.extensions[i]?.pointee.type).map(GDNATIVE_API_TYPES.init(rawValue:))
            {
            case GDNATIVE_EXT_NATIVESCRIPT?:
                extensions.nativescript = head.extensions[i]
            default:
                break
            }
        }
        
        guard let nativescript:UnsafePointer<godot_gdnative_api_struct> = extensions.nativescript 
        else 
        {
            fatalError("could not find gdnative nativescript extension")
        }
        
        Self.api.1              = Self.loadCoreAPI        (head: head)
        Self.api.nativescript.1 = Self.loadNativeScriptAPI(head: nativescript)
        
        // instance binding 
        let bridge:godot_instance_binding_functions = .init(
            alloc_instance_binding_data: 
            {
                // do not allocate anything, just store the metatype pointer 
                (
                    _:UnsafeMutableRawPointer?, // `nil`, ... from `data`?
                    metatype:UnsafeRawPointer?, 
                    _:UnsafeMutableRawPointer? // object, not used here
                ) -> UnsafeMutableRawPointer? 
                in
                // cast away the const, but this is okay because we are just 
                // using the metatype pointer to encode an integer index
                .init(mutating: metatype)
            },
            free_instance_binding_data: 
            {
                (
                    _:UnsafeMutableRawPointer?, // `nil`, ... from `data`?
                    _:UnsafeMutableRawPointer? // metatype
                )
                in
                // do nothing 
            }, 
            refcount_incremented_instance_binding:  nil,
            refcount_decremented_instance_binding:  nil,
            data:                                   nil, 
            free_func:                              nil) 
        
        Self.api.nativescript.swift = Self.api.nativescript.1.1
            .godot_nativescript_register_instance_binding_data_functions(bridge)
        
        for (i, metatype):(Int, AnyDelegate.Type) in Self.DelegateTypes.enumerated()
        {
            Self.api.nativescript.1.1.godot_nativescript_set_global_type_tag(
                Self.api.nativescript.swift, 
                metatype.symbol, 
                UnsafeRawPointer.init(bitPattern: i)) 
        }
    }
    
    fileprivate static 
    func deinitialize() 
    {
        // must happen before clearing nativescript api, for obvious reasons
        Self.api.nativescript.1.1
            .godot_nativescript_unregister_instance_binding_data_functions(Self.api.nativescript.swift)
        Self.api.nativescript.1.1   = .init()
        Self.api.nativescript.1.0   = .init()
        
        Self.api.1.2                = .init()
        Self.api.1.1                = .init()
        Self.api.1.0                = .init()
        Self.api.nativescript.swift = -1
    }
    
    // global functions 
    static 
    func type(of core:UnsafeMutableRawPointer) -> Godot.AnyDelegate.Type 
    {
        let index:Int = .init(bitPattern: Self.api.nativescript.1.1
            .godot_nativescript_get_instance_binding_data(Self.api.nativescript.swift, core))
        return Self.DelegateTypes[index]
    }
    
    static 
    func print(_ items:Any..., separator:Swift.String = " ", terminator:Swift.String = "") 
    {
        var string:godot_string = .init(packing:
            "(swift) \(items.map{"\($0)"}.joined(separator: separator))\(terminator)")
        withUnsafePointer(to: string, Self.api.1.0.godot_print)
        string.deinit()
    }
    static 
    func print(warning:Swift.String, function:Swift.String = #function, file:Swift.String = #file, line:Int32 = #line) 
    {
        Self.api.1.0.godot_print_warning("(swift) \(warning)", function, file, line)
    }
    static 
    func print(error:Swift.String, function:Swift.String = #function, file:Swift.String = #file, line:Int32 = #line) 
    {
        Self.api.1.0.godot_print_error("(swift) \(error)", function, file, line)
    }
    static 
    func print(error:DynamicCallError, function:Swift.String = #function, file:Swift.String = #file, line:Int32 = #line) 
    {
        Self.print(error: error.description, function: function, file: file, line: line)
    }
    
    // debug utilities 
    static 
    func dump(_ string:godot_string) 
    {
        withUnsafeBytes(of: string) 
        {
            let storage:UnsafePointer<Int32>    = $0.load(as: UnsafePointer<Int32>.self)
            let count:Int                       = .init(storage[-1])
            let retains:Int32                   =       storage[-2]
            let scalars:[Unicode.Scalar]        = (0 ..< count).map 
            {
                Unicode.Scalar.init(Int.init(storage[$0])) ?? "\u{0}" 
            }
            Swift.print(
                """
                Godot::String (\($0.count) bytes)
                {
                    copy-on-write data (buffer at \(storage)) 
                    {
                        count           : \(count)
                        scalars         : \(scalars) 
                        reference count : \(retains)
                    }
                }
                """
            )
        }
    }
    static 
    func dump(_ array:godot_array) 
    {
        withUnsafeBytes(of: array) 
        {
            let storage:UnsafeRawPointer        = $0.load(as: UnsafeRawPointer.self)
            let retains:UInt32                  = storage.load(as: UInt32.self)
            
            if let cowdata:UnsafePointer<Int32> = storage.load(
                fromByteOffset: 2 * MemoryLayout<UnsafePointer<Int32>?>.stride, 
                as:                              UnsafePointer<Int32>?.self)
            {
                Swift.print(
                    """
                    Godot::Array (\($0.count) bytes)
                    {
                        Godot::Array::ArrayPrivate (buffer at \(storage)) 
                        {
                            reference count : \(retains)
                            
                            copy-on-write data (buffer at \(cowdata)) 
                            {
                                count           : \(cowdata[-1])
                                reference count : \(cowdata[-2])
                            }
                        }
                    }
                    """
                )
            }
            else 
            {
                Swift.print(
                    """
                    Godot::Array (\($0.count) bytes)
                    {
                        Godot::Array::ArrayPrivate (buffer at \(storage)) 
                        {
                            reference count : \(retains)
                            
                            copy-on-write data (nil)
                        }
                    }
                    """
                )
            }
        }
    }
    static 
    func dump(object:UnsafeMutableRawPointer) 
    {
        let id:UInt64 = object.load(fromByteOffset: 8 * 9, as: UInt64.self)
        var stringname:godot_string_name    = object.load(fromByteOffset: 8 * 30, 
            as: godot_string_name.self)
        let classname:Swift.String          = .init(Godot.String.init(retained: 
            Self.api.1.0.godot_string_name_get_name(&stringname)))
        
        let retains:UInt32                  = object.load(fromByteOffset: 8 * 31, as: UInt32.self)
        
        Swift.print(
            """
            Godot::Object (object at \(object))
            {
                object id       : \(id)
                class name      : \(classname)
                reference count : \(retains)
            }
            """
        )
    }
}

protocol _GodotNativeLibrary 
{
    static 
    var interface:Godot.Library.Interface 
    {
        get
    }
}

protocol _GodotAnyNativeScript
{
#if BUILD_STAGE_INERT
    // must provide interfaces as Strings, using actual metatypes crashes the 
    // swift compiler 
    static 
    var __properties__:Int
    {
        get 
    }
    static 
    var __methods__:[String]
    {
        get 
    }
    static 
    var __signals__:[String]
    {
        get 
    }
#else 
    static 
    func register(_ symbols:[String], with:Godot.Library)
#endif 
}

protocol _GodotNativeScript:Godot.AnyNativeScript
{
    typealias Interface = Godot.NativeScriptInterface<Self>
    
    associatedtype Delegate:Godot.AnyDelegate
    
    init(delegate:Delegate)
    
    static 
    var interface:Interface
    {
        get
    }
}
extension Godot.NativeScript 
{
    static 
    var interface:Interface 
    {
        .init(properties: [], methods: [], signals: [])
    }
}
extension Godot 
{
    typealias AnyNativeScript   = _GodotAnyNativeScript
    typealias NativeScript      = _GodotNativeScript
    
    typealias NativeLibrary     = _GodotNativeLibrary 
    
    struct Library:NativeLibrary 
    {
        private 
        let handle:UnsafeMutableRawPointer 
        
        fileprivate static
        func wrap(handle:UnsafeMutableRawPointer) -> Self
        {
            .init(handle: handle)
        }
    }
}
extension Godot.Library 
{
    typealias Initializer = @convention(c)
        (
            UnsafeMutableRawPointer?, 
            UnsafeMutableRawPointer?
        ) -> UnsafeMutableRawPointer?
    typealias Deinitializer = @convention(c)
        (
            UnsafeMutableRawPointer?, 
            UnsafeMutableRawPointer?, 
            UnsafeMutableRawPointer?
        ) -> ()
    typealias WitnessDeinitializer = @convention(c)
        (
            UnsafeMutableRawPointer?
        ) -> ()
    typealias Dispatcher = @convention(c) 
        (
            UnsafeMutableRawPointer?, 
            UnsafeMutableRawPointer?, 
            UnsafeMutableRawPointer?, 
            Int32, 
            UnsafeMutablePointer<UnsafeMutablePointer<godot_variant>?>?
        ) -> godot_variant
    typealias Getter = @convention(c) 
        (
            UnsafeMutableRawPointer?, 
            UnsafeMutableRawPointer?, 
            UnsafeMutableRawPointer? 
        ) -> godot_variant
    typealias Setter = @convention(c) 
        (
            UnsafeMutableRawPointer?, 
            UnsafeMutableRawPointer?, 
            UnsafeMutableRawPointer?, 
            UnsafeMutablePointer<godot_variant>?
        ) -> ()
    
    @resultBuilder 
    struct Interface 
    {
        typealias Binding = (type:Godot.AnyNativeScript.Type, symbol:Swift.String)
        
        let types:[(type:Godot.AnyNativeScript.Type, symbols:[Swift.String])]
    }
    
    fileprivate 
    func initialize() 
    {
        for (type, symbols):(Godot.AnyNativeScript.Type, [Swift.String]) in Self.interface.types 
        {
        #if !BUILD_STAGE_INERT
            type.register(symbols, with: self)
        #endif
        }
        
        // assert unsafebitcast memory layouts 
        MemoryLayout<godot_vector2>.assert()
        MemoryLayout<godot_vector3>.assert()
        MemoryLayout<godot_color>.assert()
        MemoryLayout<godot_quat>.assert()
        MemoryLayout<godot_plane>.assert()
        
        MemoryLayout<godot_rect2>.assert()
        MemoryLayout<godot_aabb>.assert()
        
        MemoryLayout<godot_transform2d>.assert()
        MemoryLayout<godot_transform>.assert()
        MemoryLayout<godot_basis>.assert() 
        
        MemoryLayout<godot_rid>.assert() 
        
        // assert variant type enum matches c headers 
        for (swift, c):(Godot.VariantType, godot_variant_type) in 
        [
            (.void,                 GODOT_VARIANT_TYPE_NIL),
        	(.bool,                 GODOT_VARIANT_TYPE_BOOL),
        	(.int,                  GODOT_VARIANT_TYPE_INT),
        	(.float,                GODOT_VARIANT_TYPE_REAL),
        	(.string,               GODOT_VARIANT_TYPE_STRING),
        	(.vector2,              GODOT_VARIANT_TYPE_VECTOR2),
            (.vector3,              GODOT_VARIANT_TYPE_VECTOR3),
            (.vector4,              GODOT_VARIANT_TYPE_COLOR),
        	(.rectangle2,           GODOT_VARIANT_TYPE_RECT2),
            (.rectangle3,           GODOT_VARIANT_TYPE_AABB),
        	(.affine2,              GODOT_VARIANT_TYPE_TRANSFORM2D),
            (.affine3,              GODOT_VARIANT_TYPE_TRANSFORM),
            (.linear3,              GODOT_VARIANT_TYPE_BASIS),
        	(.plane3,               GODOT_VARIANT_TYPE_PLANE),
        	(.quaternion,           GODOT_VARIANT_TYPE_QUAT),
        	(.nodePath,             GODOT_VARIANT_TYPE_NODE_PATH),
        	(.resourceIdentifier,   GODOT_VARIANT_TYPE_RID),
        	(.delegate,             GODOT_VARIANT_TYPE_OBJECT),
        	(.map,                  GODOT_VARIANT_TYPE_DICTIONARY),
        	(.list,                 GODOT_VARIANT_TYPE_ARRAY),
        	(.uint8Array,           GODOT_VARIANT_TYPE_POOL_BYTE_ARRAY),
        	(.int32Array,           GODOT_VARIANT_TYPE_POOL_INT_ARRAY),
        	(.float32Array,         GODOT_VARIANT_TYPE_POOL_REAL_ARRAY),
        	(.stringArray,          GODOT_VARIANT_TYPE_POOL_STRING_ARRAY),
        	(.vector2Array,         GODOT_VARIANT_TYPE_POOL_VECTOR2_ARRAY),
        	(.vector3Array,         GODOT_VARIANT_TYPE_POOL_VECTOR3_ARRAY),
        	(.vector4Array,         GODOT_VARIANT_TYPE_POOL_COLOR_ARRAY),
        ]
        {
            guard swift.value == c.rawValue
            else 
            {
                fatalError("Godot.VariantType enum raw value for '\(swift)' does not match definition in c headers. check version compatibility!")
            }
        }
    }
    fileprivate 
    func deinitialize() 
    {
    }
    
    func register<T>(
        initializer:godot_instance_create_func, 
        deinitializer:godot_instance_destroy_func, 
        for _:T.Type, as symbol:String) 
        where T:Godot.NativeScript
    {
        Godot.print("registering \(T.self) as nativescript 'Godot::\(symbol)'")
        
        Godot.api.nativescript.1.0.godot_nativescript_register_class(self.handle, 
            symbol, T.Delegate.symbol, initializer, deinitializer)
    }
    
    func register(method:godot_instance_method, 
        in script:String, as symbol:String, annotations:[Godot.Annotations.Argument]) 
    {
        Godot.print("registering (function) as method 'Godot::\(script)::\(symbol)'")
        
        let attributes:godot_method_attributes = .init(
            rpc_type: GODOT_METHOD_RPC_MODE_DISABLED)
        Godot.api.nativescript.1.0.godot_nativescript_register_method(self.handle, 
            script, symbol, attributes, method)
    }
    
    func register(property:(get:godot_property_get_func, set:godot_property_set_func), 
        in script:String, as symbol:String, annotations:Godot.Annotations.Property) 
    {
        Godot.print("registering (function) as property 'Godot::\(script)::\(symbol)'")
        
        var attributes:godot_property_attributes = .init(
            rset_type:          GODOT_METHOD_RPC_MODE_DISABLED, 
            type:              .init(annotations.type.value), 
            hint:               GODOT_PROPERTY_HINT_NONE,
            hint_string:       .init(packing: ""), 
            usage:              GODOT_PROPERTY_USAGE_DEFAULT, 
            default_value:     .init())
        
        Godot.api.nativescript.1.0.godot_nativescript_register_property(self.handle, 
            script, symbol, &attributes, property.set, property.get)
        
        attributes.hint_string.deinit()
    }
    
    func register(signal:Godot.AnySignal.Type, in script:String) 
    {
        Godot.print("registering \(signal) as signal 'Godot::\(script)::\(signal.name)'")
        
        var arguments:[godot_signal_argument] = signal.annotations.map 
        {
            .init(
                name:          .init(packing: $0.label), 
                type:          .init($0.type.value), 
                hint:           GODOT_PROPERTY_HINT_NONE, 
                hint_string:   .init(packing: ""), 
                usage:          GODOT_PROPERTY_USAGE_DEFAULT, 
                default_value: .init())
        }
        arguments.withUnsafeMutableBufferPointer 
        {
            var descriptor:godot_signal = .init(name: .init(packing: signal.name), 
                num_args:           .init($0.count), 
                args:               $0.baseAddress, 
                num_default_args:   0, 
                default_args:       nil)
            
            withUnsafePointer(to: descriptor) 
            {
                Godot.api.nativescript.1.0
                    .godot_nativescript_register_signal(self.handle, script, $0)
            }
            
            descriptor.name.deinit()
        }
        for i:Int in arguments.indices 
        {
            arguments[i].name.deinit()
            arguments[i].hint_string.deinit()
        } 
    }
}
extension Godot 
{
    enum Annotations 
    {
        struct Argument 
        {
            let label:Swift.String 
            let type:Godot.VariantType
        }
        struct Property 
        {
            let type:Godot.VariantType
        }
    }
    
    @resultBuilder
    struct NativeScriptInterface<T> where T:Godot.NativeScript
    {
        enum Witness 
        {
            typealias Get = (T) -> Godot.Unmanaged.Variant
            typealias Set = (T,    Godot.Unmanaged.Variant) -> ()
            
            typealias Property  = (get:Get, set:Set) 
            typealias Method    = (T, T.Delegate, Godot.VariadicArguments) -> Godot.Unmanaged.Variant
        }
        
        typealias Property  = 
        (
            symbol:Swift.String,
            annotations:Annotations.Property,
            witness:Witness.Property 
        )
        #if BUILD_STAGE_INERT
        typealias Method    = Any.Type
        #else 
        typealias Method    = 
        (
            symbol:Swift.String,
            annotations:[Annotations.Argument],
            witness:Witness.Method
        )
        #endif
        typealias Signal    = Godot.AnySignal.Type
        
        private(set)
        var properties:[Property]
        private(set)
        var methods:[Method]
        
        let signals:[Signal]
        
        init(properties:[Property], methods:[Method], signals:[Signal])
        {
            self.properties = properties 
            self.methods    = methods
            self.signals    = signals
        }
        
        subscript(property index:Int) -> Property 
        {
            _read
            {
                yield self.properties[index]
            }
        }
        subscript(method index:Int) -> Method 
        {
            _read 
            {
                yield self.methods[index]
            }
        }
    }
}

extension Godot 
{
    typealias AnySignal = _GodotAnySignal
    typealias Signal    = _GodotSignal
    
    /// struct Godot.SignalInterface<T> 
    /// @   resultBuilder 
    ///     A descriptor specifying how signal fields are read from an 
    ///     instance of [[`T`]].
    /// #   (1:godot-signal-usage)
    @resultBuilder
    struct SignalInterface<T> 
    {        
        typealias Argument =
        (
            annotations:Annotations.Argument, 
            witness:(T) -> Godot.Unmanaged.Variant 
        )
        
        let arguments:[Argument]
    } 
}
protocol _GodotAnySignal 
{
    static 
    var annotations:[Godot.Annotations.Argument]
    {
        get
    } 
    
    /// static var Godot.Signal.name:Swift.String { get }
    /// required 
    ///     The name of this signal type, as seen by Godot.
    static 
    var name:Swift.String
    {
        get
    } 
}
/// protocol Godot.Signal 
///     A type specifying the name and format of a Godot signal.
/// #   (0:godot-signal-usage)
protocol _GodotSignal:Godot.AnySignal  
{
    /// typealias Godot.Signal.Interface = Godot.SignalInterface<Value> 
    typealias Interface = Godot.SignalInterface<Value>
    
    /// associatedtype Godot.Signal.Value 
    ///     An arbitrary type which can be used with [`Godot.AnyDelegate.emit(signal:as:)`].
    associatedtype Value 
    
    /// static var Godot.Signal.interface:Interface { get }
    /// required 
    ///     The interface of this signal type, specifying how signal fields 
    ///     are read from an instance of [[`Value`]]. 
    static 
    var interface:Interface
    {
        get
    } 
}
extension Godot.Signal 
{
    static 
    var annotations:[Godot.Annotations.Argument]
    {
        Self.interface.arguments.map(\.annotations)
    } 
} 

// arc sanitizer 
extension Godot 
{
    final 
    class NativeScriptMetadata
    {
    #if ENABLE_ARC_SANITIZER
        
        private 
        let tracker:RetainTracker 
        let symbol:Swift.String
        
        init(symbol:Swift.String, tracker:RetainTracker)
        {
            self.symbol     = symbol
            self.tracker    = tracker
        }
        
        func track() 
        {
            self.tracker.table[self.symbol]?.wrappingIncrement(ordering: .relaxed)
        }
        func untrack() 
        {
            self.tracker.table[self.symbol]?.wrappingDecrement(ordering: .relaxed)
        }
        
    #else 
        
        let symbol:Swift.String
        
        init(symbol:Swift.String)
        {
            self.symbol = symbol
        }
    
    #endif 
    }
}
#if ENABLE_ARC_SANITIZER
extension Godot 
{
    final 
    class RetainTracker 
    {
        private 
        let type:Godot.AnyNativeScript.Type
        var table:[Swift.String: ManagedAtomic<Int>] 
        
        init(type:Godot.AnyNativeScript.Type, symbols:[Swift.String]) 
        {
            self.type   = type 
            self.table  = .init(uniqueKeysWithValues: symbols.map{ ($0, .init(0)) })
        }
        deinit 
        {
            func plural(_ count:Int) -> Swift.String 
            {
                count == 1 ? "\(count) leaked instance" : "\(count) leaked instances"
            }
            
            let leaked:[Swift.String: Int] = self.table.compactMapValues 
            {
                let count:Int = $0.load(ordering: .relaxed)
                return count != 0 ? count : nil
            }
            if !leaked.isEmpty 
            {
                Godot.print(warning: 
                    """
                    detected \(plural(leaked.values.reduce(0, +))) of \(Swift.String.init(reflecting: self.type)):
                    \(leaked.sorted{ $0.key < $1.key }.map
                    { 
                        "    \(plural($0.value)) of '\($0.key)'" 
                    }.joined(separator: "\n"))
                    """)
            }
        }
    }
}
#endif 

/* func _testsemantics() 
{
    do 
    {
        // +1
        var s1:godot_string = Godot.api.1.0.godot_string_chars_to_utf8("foofoo")
        
        Godot.dump(s1)
        
        // +2
        var v1:godot_variant = .init() 
        Godot.api.1.0.godot_variant_new_string(&v1, &s1)
        
        Godot.dump(s1)
        
        // +3
        var s2:godot_string = Godot.api.1.0.godot_variant_as_string(&v1)
        
        Godot.dump(s1)
        Godot.dump(s2)
        
        Godot.api.1.0.godot_variant_destroy(&v1)
        // +2
        
        Godot.dump(s1)
        
        Godot.api.1.0.godot_string_destroy(&s2)
        // +1
        
        Godot.dump(s1)
    }
    
    do 
    {
        // +1 
        var a1:godot_array = .init() 
        Godot.api.1.0.godot_array_new(&a1)
        
        Godot.dump(a1)
        
        Godot.api.1.0.godot_array_resize(&a1, 5)
        
        Godot.dump(a1)
        
        // +2
        var v1:godot_variant = .init() 
        Godot.api.1.0.godot_variant_new_array(&v1, &a1)
        
        Godot.dump(a1)
        
        // +3
        var a2:godot_array = Godot.api.1.0.godot_variant_as_array(&v1)
        
        Godot.dump(a1)
        Godot.dump(a2)
        
        Godot.api.1.0.godot_variant_destroy(&v1)
        // +2
        
        Godot.dump(a1)
        
        Godot.api.1.0.godot_array_destroy(&a2)
        // +1
        
        Godot.dump(a1)
    }
} */

// functionality factored from generated bindings
extension Godot.NativeScriptInterface
{
    static 
    func initialize(delegate:UnsafeMutableRawPointer?, metadata:UnsafeMutableRawPointer?) 
        -> UnsafeMutableRawPointer? 
    {
        var description:String 
        {
            "initializer from interface of type '\(String.init(reflecting: T.self))'"
        }
        
        guard let core:UnsafeMutableRawPointer = delegate 
        else 
        {
            fatalError("(swift) \(description) received nil delegate pointer")
        }
        // allow recovery on mismatched delegate type
        let metatype:Godot.AnyDelegate.Type = Godot.type(of: core)
        guard let delegate:T.Delegate = metatype.init(unretained: core) as? T.Delegate
        else 
        {
            Godot.print(error: 
                """
                cannot call \(description) with delegate of type '\(String.init(reflecting: metatype))' \ 
                (aka 'Godot::\(metatype.symbol)'), expected delegate of type \
                '\(String.init(reflecting: T.Delegate.self))' (aka 'Godot::\(T.Delegate.symbol)') \ 
                or one of its subclasses
                """)
            
            return nil
        } 
        
        #if ENABLE_ARC_SANITIZER
        if let metadata:UnsafeMutableRawPointer = metadata 
        {
            Unmanaged<Godot.NativeScriptMetadata>.fromOpaque(metadata)
                .takeUnretainedValue()
                .track()
        }
        else 
        {
            Godot.print(warning: "\(description) is missing expected type metadata")
        }
        #endif
        
        return Unmanaged<AnyObject>
            .passRetained(T.init(delegate: delegate) as AnyObject).toOpaque() 
    }
    
    static 
    func deinitialize(instance:UnsafeMutableRawPointer?, metadata:UnsafeMutableRawPointer?) 
    {
        var description:String 
        {
            "deinitializer from interface of type '\(String.init(reflecting: T.self))'"
        }
        
        guard let instance:UnsafeMutableRawPointer = instance 
        else 
        {
            fatalError("(swift) \(description) received nil instance pointer")
        }
        
        #if ENABLE_ARC_SANITIZER
        if let metadata:UnsafeMutableRawPointer = metadata 
        {
            Unmanaged<Godot.NativeScriptMetadata>.fromOpaque(metadata)
                .takeUnretainedValue()
                .untrack()
        }
        else 
        {
            Godot.print(warning: "\(description) is missing expected type metadata")
        }
        #endif
        
        Unmanaged<AnyObject>.fromOpaque(instance).release()
    }
    
#if !BUILD_STAGE_INERT
    func get(property index:Int, instance:UnsafeMutableRawPointer?) 
        -> godot_variant 
    {
        var description:String 
        {
            """
            property getter '\(self[property: index].symbol)' \ 
            from interface of type '\(String.init(reflecting: T.self))'
            """
        }
        // load `self`
        guard   let opaque:UnsafeMutableRawPointer  = instance, 
                let instance:T                      = Unmanaged<AnyObject>
                    .fromOpaque(opaque)
                    .takeUnretainedValue() as? T
        else 
        {
            fatalError("(swift) \(description) received nil or invalid instance pointer")
        }
        
        return self[property: index].witness.get(instance).unsafeData 
    } 
    func set(property index:Int, instance:UnsafeMutableRawPointer?, value:godot_variant?) 
    {
        var description:String 
        {
            """
            property setter '\(self[property: index].symbol)' \ 
            from interface of type '\(String.init(reflecting: T.self))'
            """
        }
        // load `self`
        guard   let opaque:UnsafeMutableRawPointer  = instance, 
                let instance:T                      = Unmanaged<AnyObject>
                    .fromOpaque(opaque)
                    .takeUnretainedValue() as? T
        else 
        {
            fatalError("(swift) \(description) received nil or invalid instance pointer")
        }
        guard   let value:Godot.Unmanaged.Variant = 
            value.map(Godot.Unmanaged.Variant.init(unsafeData:))
        else 
        {
            fatalError("(swift) received nil argument pointer from gdscript property assignment")
        }
        
        self[property: index].witness.set(instance, value) 
    } 
    
    func call(method index:Int,
        instance:UnsafeMutableRawPointer?, 
        delegate:UnsafeMutableRawPointer?, 
        arguments:
        (
            start:UnsafeMutablePointer<UnsafeMutablePointer<godot_variant>?>?,
            count:Int
        ))
        -> godot_variant 
    {
        var description:String 
        {
            """
            method '\(self[method: index].symbol)' \ 
            from interface of type '\(String.init(reflecting: T.self))'
            """
        }
        // load `self`
        guard   let opaque:UnsafeMutableRawPointer  = instance, 
                let instance:T                      = Unmanaged<AnyObject>
                    .fromOpaque(opaque)
                    .takeUnretainedValue() as? T
        else 
        {
            fatalError("(swift) \(description) received nil or invalid instance pointer")
        }
        // load `delegate`
        guard   let core:UnsafeMutableRawPointer    = delegate, 
                let delegate:T.Delegate             = Godot.type(of: core)
                    .init(unretained: core) as? T.Delegate
        else 
        {
            fatalError("(swift) \(description) received nil or invalid delegate pointer")
        }
        
        return Godot.VariadicArguments.bind(arguments.start, count: arguments.count)
        {
            self[method: index].witness(instance, delegate, $0).unsafeData
        }
    }
#endif
}
extension Godot 
{
    struct VariadicArguments
    {
        private 
        let arguments:UnsafeMutableBufferPointer<UnsafeMutablePointer<Unmanaged.Variant>>
        
        typealias RawArgument       = UnsafeMutablePointer<godot_variant>
        typealias RawArgumentVector = UnsafeMutablePointer<RawArgument?>
        
        static 
        func bind<R>(_ start:RawArgumentVector?, count:Int, 
            body:(Self) throws -> R) 
            rethrows -> R
        {
            if count > 0 
            {
                // assert arguments pointers are non-nil 
                guard let base:RawArgumentVector = start
                else 
                {
                    fatalError("(swift) received nil argument-vector pointer from gdscript method call")
                }
                for i:Int in 0 ..< count where base[i] == nil 
                {
                    fatalError("(swift) received nil argument pointer from gdscript method call at position \(i)")
                }
            }
            
            let buffer:UnsafeMutableBufferPointer<RawArgument?> = 
                .init(start: start, count: count)
            
            return try buffer.withMemoryRebound(
                to: UnsafeMutablePointer<Unmanaged.Variant>.self) 
            {
                try body(.init(arguments: $0))
            }
        }
    }
}
