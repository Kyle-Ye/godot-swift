protocol _GodotRawAggregate:Godot.RawValue 
{
    associatedtype Unpacked 
    associatedtype Packed
    
    static 
    func unpacked(variant:Godot.Unmanaged.Variant) -> Unpacked? 
    static 
    func variant(packing:Unpacked) -> Godot.Unmanaged.Variant
    
    init(packing:Unpacked)
    var unpacked:Unpacked 
    {
        get 
    }
}
private 
protocol _GodotRawAggregatePrivate:Godot.RawAggregate
{
    // used for runtime sanity checks
    static 
    func trace() -> Bool
}
extension Godot 
{
    fileprivate 
    typealias RawAggregatePrivate   = _GodotRawAggregatePrivate
    typealias RawAggregate          = _GodotRawAggregate
}
extension godot_vector2:Godot.RawAggregatePrivate 
{
    typealias Packed = (Float32, Float32)

    init(packing vector:Vector2<Float32>)
    {
        self = unsafeBitCast(vector*, to: Self.self)
    }
    var unpacked:Vector2<Float32> 
    {
        unsafeBitCast(self, to: Packed.self)*
    }
    
    fileprivate static 
    func trace() -> Bool 
    {
        let tracer:Vector2<Float32> = (1, 2)*
        
        var data:Self = .init()
        Godot.api.1.0.godot_vector2_new(&data, tracer.x, tracer.y)
        
        return data.unpacked == tracer
    }
}
extension godot_vector3:Godot.RawAggregatePrivate 
{
    typealias Packed = (Float32, Float32, Float32)
    
    init(packing vector:Vector3<Float32>)
    {
        self = unsafeBitCast(vector*, to: Self.self)
    }
    var unpacked:Vector3<Float32> 
    {
        unsafeBitCast(self, to: Packed.self)*
    }
    
    fileprivate static 
    func trace() -> Bool 
    {
        let tracer:Vector3<Float32> = (1, 2, 3)*
        
        var data:Self = .init()
        Godot.api.1.0.godot_vector3_new(&data, tracer.x, tracer.y, tracer.z)
        
        return data.unpacked == tracer
    }
}
// color, quat, and plane should all have the same format 
extension godot_color:Godot.RawAggregatePrivate 
{
    typealias Packed = (Float32, Float32, Float32, Float32)
    
    init(packing vector:Vector4<Float32>)
    {
        self = unsafeBitCast(vector*, to: Self.self)
    }
    var unpacked:Vector4<Float32> 
    {
        unsafeBitCast(self, to: Packed.self)*
    }
    
    fileprivate static 
    func trace() -> Bool 
    {
        let tracer:Vector4<Float32> = (1, 2, 3, 4)*
        
        var data:Self = .init()
        Godot.api.1.0.godot_color_new_rgba(&data, tracer.x, tracer.y, tracer.z, tracer.w)
        
        return data.unpacked == tracer
    }
}
extension godot_quat:Godot.RawAggregatePrivate 
{
    typealias Packed = (Float32, Float32, Float32, Float32)
    
    init(packing quaternion:Quaternion<Float32>)
    {
        self = unsafeBitCast(quaternion.composite*, to: Self.self)
    }
    var unpacked:Quaternion<Float32> 
    {
        .init(composite: unsafeBitCast(self, to: Packed.self)*)
    }
    
    fileprivate static 
    func trace() -> Bool 
    {
        let tracer:Quaternion<Float32> = .init(composite: (1, 2, 3, 4)*)
        
        var data:Self = .init()
        Godot.api.1.0.godot_quat_new(&data, 
            tracer.imaginary.x, tracer.imaginary.y, tracer.imaginary.z, tracer.real)
        
        return data.unpacked == tracer
    }
}
extension godot_plane:Godot.RawAggregatePrivate 
{
    typealias Packed = (Float32, Float32, Float32, Float32)
    
    init(packing plane:Vector3<Float32>.Plane)
    {
        self = unsafeBitCast(plane.affine*, to: Self.self)
    }
    var unpacked:Vector3<Float32>.Plane
    {
        .init(affine: unsafeBitCast(self, to: Packed.self)*)
    }
    
    fileprivate static 
    func trace() -> Bool 
    {
        let tracer:Vector3<Float32>.Plane = .init(affine: (1, 2, 3, 4)*)
        
        var data:Self = .init()
        withUnsafePointer(to: godot_vector3.init(packing: tracer.normal))
        {
            Godot.api.1.0.godot_plane_new_with_normal(&data, $0, tracer.bias)
        }
        
        return data.unpacked == tracer
    }
}
extension godot_rect2:Godot.RawAggregatePrivate 
{
    typealias Packed = ((Float32, Float32), (Float32, Float32))
    
    init(packing rectangle:Vector2<Float32>.Rectangle)
    {
        self = unsafeBitCast((rectangle.lowerBound*, rectangle.size*), to: Self.self)
    }
    var unpacked:Vector2<Float32>.Rectangle
    {
        let packed:Packed               = unsafeBitCast(self, to: Packed.self)
        let position:Vector2<Float32>   = packed.0*,
            size:Vector2<Float32>       = packed.1*
        return position ..< position + size
    }
    
    fileprivate static 
    func trace() -> Bool 
    {
        let tracer:Vector2<Float32>.Rectangle = (1, 2)* ..< (4, 6)*
        
        var data:Self = .init()
        withUnsafePointer(to: .init(packing: tracer.lowerBound))
        {
            (start:UnsafePointer<godot_vector2>) in 
            withUnsafePointer(to: .init(packing: tracer.size))
            {
                (size:UnsafePointer<godot_vector2>) in  
                Godot.api.1.0.godot_rect2_new_with_position_and_size(&data, start, size)
            }
        }
        
        return data.unpacked == tracer 
    }
}
extension godot_aabb:Godot.RawAggregatePrivate 
{
    typealias Packed = ((Float32, Float32, Float32), (Float32, Float32, Float32))
    
    init(packing rectangle:Vector3<Float32>.Rectangle)
    {
        self = unsafeBitCast((rectangle.lowerBound*, rectangle.size*), to: Self.self)
    }
    var unpacked:Vector3<Float32>.Rectangle
    {
        let packed:Packed               = unsafeBitCast(self, to: Packed.self)
        let position:Vector3<Float32>   = packed.0*,
            size:Vector3<Float32>       = packed.1*
        return position ..< position + size
    }
    
    fileprivate static 
    func trace() -> Bool 
    {
        let tracer:Vector3<Float32>.Rectangle = (1, 2, 3)* ..< (5, 7, 9)*
        
        var data:Self = .init()
        withUnsafePointer(to: .init(packing: tracer.lowerBound))
        {
            (start:UnsafePointer<godot_vector3>) in 
            withUnsafePointer(to: .init(packing: tracer.size))
            {
                (size:UnsafePointer<godot_vector3>) in  
                Godot.api.1.0.godot_aabb_new(&data, start, size)
            }
        }
        
        return data.unpacked == tracer 
    }
}
extension godot_transform2d:Godot.RawAggregatePrivate 
{
    // godot does not provide an interface for accessing the basis vectors, 
    // so we have to (unsafely) extract them from raw memory 
    typealias Packed = ((Float32, Float32), (Float32, Float32), (Float32, Float32))
    
    init(packing transform:Godot.Transform2<Float32>.Affine)
    {
        self = unsafeBitCast(
            (
                transform.matrix.0*, 
                transform.matrix.1*, 
                transform.matrix.2*
            ), to: Self.self)
    }
    var unpacked:Godot.Transform2<Float32>.Affine
    {
        let packed:Packed = unsafeBitCast(self, to: Packed.self)
        return .init(matrix: (packed.0*, packed.1*, packed.2*))
    }

    fileprivate static 
    func trace() -> Bool 
    {
        let tracer:Godot.Transform2<Float32>.Affine = 
            .init(matrix: ((1, 2)*, (3, 4)*, (5, 6)*))
        
        var data:godot_transform2d          = .init()
        withUnsafePointer(to: godot_vector2.init(packing: tracer.matrix.0))
        {
            (a:UnsafePointer<godot_vector2>) in 
            withUnsafePointer(to: godot_vector2.init(packing: tracer.matrix.1))
            {
                (b:UnsafePointer<godot_vector2>) in 
                withUnsafePointer(to: godot_vector2.init(packing: tracer.matrix.2))
                {
                    (c:UnsafePointer<godot_vector2>) in 
                    Godot.api.1.0.godot_transform2d_new_axis_origin(&data, a, b, c)
                }
            }
        }
        
        return data.unpacked == tracer 
    }
}
extension godot_transform:Godot.RawAggregatePrivate 
{
    // godot does not provide an interface for accessing the basis vectors, 
    // so we have to (unsafely) extract them from raw memory. we cannot cast 
    // directly to Vector3.Matrix, because Vector3 is padded to the size of a 
    // Vector4 instance.
    typealias Packed = 
    (
        basis:
        (
            (Float32, Float32, Float32), 
            (Float32, Float32, Float32), 
            (Float32, Float32, Float32)
        ),
        origin:
        (Float32, Float32, Float32)
    )

    init(packing transform:Godot.Transform3<Float32>.Affine)
    {
        let rows:Vector3<Float32>.Matrix = (transform.matrix.0, transform.matrix.1, transform.matrix.2)*
        self = unsafeBitCast(((rows.0*, rows.1*, rows.2*), transform.matrix.3*), to: Self.self)
    }
    var unpacked:Godot.Transform3<Float32>.Affine
    {
        let packed:Packed                     =  unsafeBitCast(self, to: Packed.self)
        let columns:Vector3<Float32>.Matrix   = (packed.basis.0*, packed.basis.1*, packed.basis.2*)*
        return .init(matrix: (columns.0, columns.1, columns.2, packed.origin*))
    }

    fileprivate static 
    func trace() -> Bool 
    {
        let tracer:Godot.Transform3<Float32>.Affine = 
            .init(matrix: ((1, 2, 3)*, (4, 5, 6)*, (7, 8, 9)*, (10, 11, 12)*))
        // no transposition, as `godot_transform_new_with_axis_origin` takes all-columns
        var data:godot_transform            = .init()
        withUnsafePointer(to: godot_vector3.init(packing: tracer.matrix.0))
        {
            (a:UnsafePointer<godot_vector3>) in 
            withUnsafePointer(to: godot_vector3.init(packing: tracer.matrix.1))
            {
                (b:UnsafePointer<godot_vector3>) in 
                withUnsafePointer(to: godot_vector3.init(packing: tracer.matrix.2))
                {
                    (c:UnsafePointer<godot_vector3>) in 
                    withUnsafePointer(to: godot_vector3.init(packing: tracer.matrix.3))
                    {
                        (d:UnsafePointer<godot_vector3>) in 
                        Godot.api.1.0.godot_transform_new_with_axis_origin(&data, a, b, c, d)
                    }
                }
            }
        }
        
        return data.unpacked == tracer 
    }
}
extension godot_basis:Godot.RawAggregatePrivate 
{
    // note: Godot::basis is stored row-major, not column-major
    typealias Packed = 
    (
        (Float32, Float32, Float32), 
        (Float32, Float32, Float32), 
        (Float32, Float32, Float32)
    )
    
    init(packing transform:Godot.Transform3<Float32>.Linear)
    {
        let rows:Vector3<Float32>.Matrix = transform.matrix*
        self = unsafeBitCast((rows.0*, rows.1*, rows.2*), to: Self.self)
    }
    var unpacked:Godot.Transform3<Float32>.Linear
    {
        let packed:Packed = unsafeBitCast(self, to: Packed.self)
        return .init(matrix: (packed.0*, packed.1*, packed.2*)*)
    }

    fileprivate static 
    func trace() -> Bool 
    {
        let tracer:Godot.Transform3<Float32>.Linear = 
            .init(matrix:((1, 2, 3)*, (4, 5, 6)*, (7, 8, 9)*))
        
        let rows:Vector3<Float32>.Matrix    = tracer.matrix*
        var data:godot_basis                = .init()
        withUnsafePointer(to: godot_vector3.init(packing: rows.0))
        {
            (a:UnsafePointer<godot_vector3>) in 
            withUnsafePointer(to: godot_vector3.init(packing: rows.1))
            {
                (b:UnsafePointer<godot_vector3>) in 
                withUnsafePointer(to: godot_vector3.init(packing: rows.2))
                {
                    (c:UnsafePointer<godot_vector3>) in 
                    Godot.api.1.0.godot_basis_new_with_rows(&data, a, b, c)
                }
            }
        }
        
        return data.unpacked == tracer 
    }
}
extension godot_rid:Godot.RawAggregatePrivate 
{
    // godot_rid always same size as machine pointer
    typealias Packed = Int
    
    init(packing identifier:Godot.ResourceIdentifier)
    {
        self = unsafeBitCast(identifier.bitPattern, to: Self.self)
    }
    var unpacked:Godot.ResourceIdentifier
    {
        return .init(bitPattern: unsafeBitCast(self, to: Packed.self))
    }

    // the godot C api does not provide a means of constructing a godot_rid with 
    // an arbitrary integer value, so we don’t have a way of properly tracing its 
    // semantics yet...
    fileprivate static 
    func trace() -> Bool 
    {
        return true 
        /* let tracer:Godot.ResourceIdentifier = .init(bitPattern: 0x12_34_56_78)
        
        let data:godot_rid  = .init(packing: tracer)
        // this causes a crash, because `godot_rid_get_id` requires the rid to 
        // actually be a valid rid
        let expected:Int    = .init(withUnsafePointer(to: data, Godot.api.1.0.godot_rid_get_id))
        
        return tracer.bitPattern == expected */
    }
}
extension MemoryLayout where T:Godot.RawAggregatePrivate
{
    fileprivate static 
    func assert()
    {
        guard Self.size == MemoryLayout<T.Packed>.size
        else 
        {
            fatalError("memory layout of `Godot::\(T.self)` has size \(Self.size) B (expected \(MemoryLayout<T.Packed>.size) B). check godot version compatibility!")
        }
        
        guard T.trace()
        else 
        {
            fatalError("memory layout of `Godot::\(T.self)` does not appear to match layout assumptions of `\(T.Unpacked.self)`. check godot version compatibility!")
        }
    }
} 
