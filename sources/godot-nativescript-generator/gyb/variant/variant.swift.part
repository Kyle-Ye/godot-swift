// variant-related functionality
extension Godot 
{
    typealias VariantRepresentable  = _GodotVariantRepresentable
    typealias Variant               = _GodotVariant
}
/// protocol Godot.VariantRepresentable 
///     A type that can be represented by a GDScript variant value.
/// #   [See also](godot-variant-usage)
/// #   (0:godot-variant-usage)
protocol _GodotVariantRepresentable 
{
    /// static var Godot.VariantRepresentable.variantType:Godot.VariantType { get }
    /// required 
    ///     A type hint used by GDScript.
    /// 
    ///     If a conforming type can be represented by more than one GDScript type, 
    ///     this property should return [`VariantType.void`].
    static 
    var variantType:Godot.VariantType
    {
        get 
    }
    // this needs to be a static function, to handle covariant `Self`. 
    // it’s better to not call these methods directly, the preferred form is the  
    // generic methods on `Godot.Unmanaged.Variant`.
    
    /// static func Godot.VariantRepresentable.takeUnretained(_:)
    /// required 
    ///     Attempts to load an instance of [[`Self`]] from an unmanaged variant 
    ///     value, performing an unbalanced retain if successful.
    /// 
    ///     The loaded instance of [[`Self`]] should be independent of the original 
    ///     variant, in memory-management terms. If the original variant value is 
    ///     deinitialized, the loaded instance of [[`Self`]] should still be valid.
    /// 
    ///     > warning:
    ///     Avoid calling this method directly; prefer calling the 
    ///     [`Unmanaged.Variant.take(unretained:)#(typed)`] instance method instead. 
    ///     This is because [[`Optional<Self>`]] also conforms to [`VariantRepresentable`], 
    ///     which makes it easy to accidentally call [`takeUnretained(_:)`] in 
    ///     an optional context, which will cause infinite recursion.
    ///
    ///     Implementations are not required to deep-copy engine reference types. 
    ///     However, their reference counts should be incremented to reflect the 
    ///     fact that Swift has taken ownership of them.
    /// 
    ///     This requirement is declared as a static method in order to handle 
    ///     covariant [[`Self`]], if applicable.
    /// - value :Godot.Unmanaged.Variant 
    ///     An unmanaged GDScript variant value.
    /// - ->    :Self? 
    ///     An instance of [[`Self`]], if it was possible to load it from `value`, 
    ///     or `nil` otherwise.
    static 
    func takeUnretained(_:Godot.Unmanaged.Variant) -> Self?
    /// func Godot.VariantRepresentable.passRetained()
    /// required 
    ///     Stores `self` as an unmanaged variant value, performing an unbalanced 
    ///     retain.
    /// 
    ///     The returned variant value should be independent of the original 
    ///     Swift instance, in memory-management terms. If `self` is deinitialized
    ///     by the Swift runtime, the returned variant should still be valid.
    ///
    ///     Avoid calling this method directly; prefer calling the 
    ///     [`Unmanaged.Variant.pass(retaining:)#(typed)`] constructor instead. 
    /// 
    ///     Implementations are not required to deep-copy `self`. However, its 
    ///     reference count should be incremented to reflect the fact that GDScript 
    ///     has taken ownership of the value.
    /// - ->    :Godot.Unmanaged.Variant 
    ///     An unmanaged GDScript variant value.
    func passRetained() -> Godot.Unmanaged.Variant 
}
/// protocol Godot.Variant
/// :   Godot.VariantRepresentable 
///     A type-erased GDScript variant.
/// 
///     Do not conform additional types to this protocol; conform custom
///     types to [`Godot.VariantRepresentable`] instead.
/// #   [See also](godot-variant-usage)
/// #   (1:godot-variant-usage)
protocol _GodotVariant:Godot.VariantRepresentable
{
}

extension Godot.AnyDelegate:Godot.Variant 
{
    static 
    var variantType:Godot.VariantType 
    {
        .delegate
    }
    static 
    func takeUnretained(_ value:Godot.Unmanaged.Variant) -> Self?
    {
        value.load(where: Godot.AnyDelegate.variantType) 
        {
            (variant:UnsafePointer<godot_variant>) -> Self? in
            
            guard let core:UnsafeMutableRawPointer = 
                Godot.api.1.0.godot_variant_as_object(variant)
            else 
            {
                return nil
            }
            // `godot_variant_as_object` passes object unretained
            return Godot.type(of: core).init(retaining: core) as? Self
        } ?? nil
    }
    func passRetained() -> Godot.Unmanaged.Variant 
    {
        withExtendedLifetime(self) 
        {
            // `godot_variant_new_object` passes the object retained, unlike 
            // `godot_variant_as_object` for some reason
            .init(value: self.core, Godot.api.1.0.godot_variant_new_object)
        }
    } 
}

// basic variants 

/// extension Bool
/// :   Godot.Variant
/// #   (0:godot-core-types)
/// #   (0:)
extension Bool:Godot.Variant 
{
    static 
    var variantType:Godot.VariantType 
    {
        .bool
    }
    static 
    func takeUnretained(_ value:Godot.Unmanaged.Variant) -> Self?
    {
        value.load(where: Self.variantType, Godot.api.1.0.godot_variant_as_bool)
    }
    func passRetained() -> Godot.Unmanaged.Variant 
    {
        .init(value: self, Godot.api.1.0.godot_variant_new_bool)
    }
}
extension FixedWidthInteger where Self:SignedInteger 
{
    static 
    var variantType:Godot.VariantType 
    {
        .int
    }
    static 
    func takeUnretained(_ value:Godot.Unmanaged.Variant) -> Self?
    {
        value.load(where: Self.variantType, Godot.api.1.0.godot_variant_as_int)
            .map(Self.init(exactly:)) ?? nil
    }
    func passRetained() -> Godot.Unmanaged.Variant 
    {
        .init(value: .init(self), Godot.api.1.0.godot_variant_new_int)
    }
}
extension FixedWidthInteger where Self:UnsignedInteger 
{
    static 
    var variantType:Godot.VariantType 
    {
        .int
    }
    static 
    func takeUnretained(_ value:Godot.Unmanaged.Variant) -> Self?
    {
        value.load(where: Self.variantType, Godot.api.1.0.godot_variant_as_uint)
            .map(Self.init(exactly:)) ?? nil
    }
    func passRetained() -> Godot.Unmanaged.Variant 
    {
        .init(value: .init(self), Godot.api.1.0.godot_variant_new_uint)
    }
}
extension BinaryFloatingPoint 
{
    static 
    var variantType:Godot.VariantType 
    {
        .float
    }
    static 
    func takeUnretained(_ value:Godot.Unmanaged.Variant) -> Self?
    {
        value.load(where: Self.variantType, Godot.api.1.0.godot_variant_as_real)
            .map(Self.init(_:))
    }
    func passRetained() -> Godot.Unmanaged.Variant 
    {
        .init(value: .init(self), Godot.api.1.0.godot_variant_new_real)
    }
}

/// extension Int64
/// :   Godot.Variant
/// #   (1:godot-core-types)
/// #   (1:)
extension Int64:Godot.Variant               {}
/// extension Float64
/// :   Godot.Variant
/// #   (2:godot-core-types)
/// #   (2:)
extension Float64:Godot.Variant             {}

extension Float32:Godot.VariantRepresentable{}
extension Float16:Godot.VariantRepresentable{}

extension Int32:Godot.VariantRepresentable  {}
extension Int16:Godot.VariantRepresentable  {}
extension Int8:Godot.VariantRepresentable   {}
extension Int:Godot.VariantRepresentable    {}

extension UInt64:Godot.VariantRepresentable {}
extension UInt32:Godot.VariantRepresentable {}
extension UInt16:Godot.VariantRepresentable {}
extension UInt8:Godot.VariantRepresentable  {}
extension UInt:Godot.VariantRepresentable   {}

extension Godot.Array:Godot.Variant 
{
    /// static var Godot.Array.variantType:VariantType { get }
    /// ?:  VariantRepresentable 
    /// #   (10:godot-array-infrequently-used-functionality)
    static 
    var variantType:Godot.VariantType 
    {
        Element.RawArrayReference.variantType
    }
    
    /// static func Godot.Array.takeUnretained(_:)
    /// ?:  VariantRepresentable 
    ///     Attempts to load a pooled array instance from a variant value.
    /// 
    ///     This function does not (immediately) copy the array storage. 
    ///     However, because Godot pooled arrays have copy-on-write semantics,
    ///     modifications to the original pooled array in GDScript will 
    ///     not be reflected in the returned Swift instance.
    /// - value :Unmanaged.Variant 
    /// - ->    :Self? 
    /// #   (10:godot-array-infrequently-used-functionality)
    static 
    func takeUnretained(_ value:Godot.Unmanaged.Variant) -> Self?
    {
        Element.downcast(array: value).map(Self.init(retained:))
    }
    /// func Godot.Array.passRetained()
    /// ?:  VariantRepresentable 
    ///     Stores this pooled array instance as a variant value.
    /// 
    ///     This function does not (immediately) copy the array storage. 
    ///     However, because Godot pooled arrays have copy-on-write semantics,
    ///     modifications to the returned array in GDScript will not  
    ///     be reflected in the original instance of `self`.
    /// - ->    :Unmanaged.Variant 
    /// #   (10:godot-array-infrequently-used-functionality)
    func passRetained() -> Godot.Unmanaged.Variant 
    {
        withExtendedLifetime(self)
        {
            Element.upcast(array: self.core)
        }
    }
}
extension Godot.NodePath:Godot.Variant 
{
    static 
    var variantType:Godot.VariantType 
    {
        godot_node_path.variantType
    }
    static 
    func takeUnretained(_ value:Godot.Unmanaged.Variant) -> Self?
    {
        value.load(where: Self.variantType)
        {
            .init(retained: Godot.api.1.0.godot_variant_as_node_path($0))
        } 
    }
    func passRetained() -> Godot.Unmanaged.Variant 
    {
        withExtendedLifetime(self)
        {
            Swift.withUnsafePointer(to: self.core) 
            {
                .init(value: $0, Godot.api.1.0.godot_variant_new_node_path)
            }
        }
    }
}
extension Godot.String:Godot.Variant 
{
    static 
    var variantType:Godot.VariantType 
    {
        godot_string.variantType
    }
    static 
    func takeUnretained(_ value:Godot.Unmanaged.Variant) -> Self?
    {
        value.load(where: Self.variantType)
        {
            .init(retained: Godot.api.1.0.godot_variant_as_string($0))
        } 
    }
    func passRetained() -> Godot.Unmanaged.Variant 
    {
        withExtendedLifetime(self)
        {
            Swift.withUnsafePointer(to: self.core) 
            {
                .init(value: $0, Godot.api.1.0.godot_variant_new_string)
            }
        }
    }
}
extension Godot.List:Godot.Variant 
{
    static 
    var variantType:Godot.VariantType 
    {
        godot_array.variantType
    }
    static 
    func takeUnretained(_ value:Godot.Unmanaged.Variant) -> Self?
    {
        value.load(where: Self.variantType)
        {
            .init(retained: Godot.api.1.0.godot_variant_as_array($0))
        }
    }
    func passRetained() -> Godot.Unmanaged.Variant 
    {
        withExtendedLifetime(self)
        {
            Swift.withUnsafePointer(to: self.core) 
            {
                .init(value: $0, Godot.api.1.0.godot_variant_new_array)
            }
        }
    }
}
extension Godot.Map:Godot.Variant 
{
    static 
    var variantType:Godot.VariantType 
    {
        godot_dictionary.variantType
    }
    static 
    func takeUnretained(_ value:Godot.Unmanaged.Variant) -> Self?
    {
        value.load(where: Self.variantType)
        {
            .init(retained: Godot.api.1.0.godot_variant_as_dictionary($0))
        }
    }
    func passRetained() -> Godot.Unmanaged.Variant 
    {
        withExtendedLifetime(self)
        {
            Swift.withUnsafePointer(to: self.core) 
            {
                .init(value: $0, Godot.api.1.0.godot_variant_new_dictionary)
            }
        }
    }
}

extension Quaternion:Godot.VariantRepresentable 
{
    static 
    var variantType:Godot.VariantType 
    {
        godot_quat.variantType
    }
    static 
    func takeUnretained(_ value:Godot.Unmanaged.Variant) -> Self?
    {
        godot_quat.unpacked(variant: value).map(Self.init(_:))
    }
    func passRetained() -> Godot.Unmanaged.Variant 
    {
        godot_quat.variant(packing: .init(self))
    }
}
extension Vector.Plane:Godot.VariantRepresentable 
    where Storage == SIMD3<T>, T:BinaryFloatingPoint
{
    static 
    var variantType:Godot.VariantType 
    {
        godot_plane.variantType
    }
    static 
    func takeUnretained(_ value:Godot.Unmanaged.Variant) -> Self?
    {
        godot_plane.unpacked(variant: value).map(Self.init(_:))
    }
    func passRetained() -> Godot.Unmanaged.Variant 
    {
        godot_plane.variant(packing: .init(self))
    }
}

extension Godot.Transform2.Affine:Godot.VariantRepresentable 
{
    static 
    var variantType:Godot.VariantType 
    {
        godot_transform2d.variantType
    }
    static 
    func takeUnretained(_ value:Godot.Unmanaged.Variant) -> Self?
    {
        godot_transform2d.unpacked(variant: value).map(Self.init(_:))
    }
    func passRetained() -> Godot.Unmanaged.Variant 
    {
        godot_transform2d.variant(packing: .init(self))
    }
}
extension Godot.Transform3.Affine:Godot.VariantRepresentable 
{
    static 
    var variantType:Godot.VariantType 
    {
        godot_transform.variantType
    }
    static 
    func takeUnretained(_ value:Godot.Unmanaged.Variant) -> Self?
    {
        godot_transform.unpacked(variant: value).map(Self.init(_:))
    }
    func passRetained() -> Godot.Unmanaged.Variant 
    {
        godot_transform.variant(packing: .init(self))
    }
} 
extension Godot.Transform3.Linear:Godot.VariantRepresentable 
{
    static 
    var variantType:Godot.VariantType 
    {
        godot_basis.variantType
    }
    static 
    func takeUnretained(_ value:Godot.Unmanaged.Variant) -> Self?
    {
        godot_basis.unpacked(variant: value).map(Self.init(_:))
    }
    func passRetained() -> Godot.Unmanaged.Variant 
    {
        godot_basis.variant(packing: .init(self))
    }
} 
extension Godot.ResourceIdentifier:Godot.Variant
{
    static 
    var variantType:Godot.VariantType 
    {
        godot_rid.variantType
    }
    static 
    func takeUnretained(_ value:Godot.Unmanaged.Variant) -> Self?
    {
        godot_rid.unpacked(variant: value)
    }
    func passRetained() -> Godot.Unmanaged.Variant 
    {
        godot_rid.variant(packing: self)
    }
}
// need to specify both type constraints separately, even though 
// it creates a compiler warning (otherwise the compiler crashes)
extension Vector.Plane:Godot.Variant            where Storage == SIMD3<T>, T == Float32 {}
extension Quaternion:Godot.Variant              where T == Float32 {}
extension Godot.Transform2.Affine:Godot.Variant where T == Float32 {}
extension Godot.Transform3.Affine:Godot.Variant where T == Float32 {}
extension Godot.Transform3.Linear:Godot.Variant where T == Float32 {}

/// extension Optional 
/// :   Godot.VariantRepresentable 
/// where Wrapped:Godot.VariantRepresentable 
/// #   (-1:)
extension Optional:Godot.VariantRepresentable where Wrapped:Godot.VariantRepresentable 
{
    // apparently, `GODOT_VARIANT_TYPE_NIL` means “unknown type” in this context
    static 
    var variantType:Godot.VariantType
    {
        .void 
    }
    static 
    func takeUnretained(_ value:Godot.Unmanaged.Variant) -> Self?
    {
        if let wrapped:Wrapped  = value.take(unretained: Wrapped.self)
        {
            return .some(wrapped)
        }
        else if let _:Void      = value.take(unretained: Void.self) 
        {
            return .some(.none)
        }
        else 
        {
            return nil 
        }
    }
    func passRetained() -> Godot.Unmanaged.Variant 
    {
        if let wrapped:Wrapped = self 
        {
            return .pass(retaining: wrapped)
        }
        else 
        {
            return .pass(retaining: ())
        }
    }
}
