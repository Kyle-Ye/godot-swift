#!/bin/bash
TOOL_NAME=$0
usage() 
{
    echo "usage: $TOOL_NAME [OPTION...]
  -l, --local       generate local html pages (as opposed to a deployable website)"
}

error()
{
    echo $1 
    exit 1
}

check()
{
    message=$1
    shift 
    echo $@
    "$@" || error "$message"
}
local=
while [ "$1" != "" ] ; do
    case $1 in 
    -l | --local ) 
        shift
        local="local"
        ;;
    * )
        usage 
        exit 1
    esac 
    shift 
done 

# compile GodotNativeScriptGenerator tool 
SWIFTPM_ENABLE_PLUGINS=1 swift build -c debug \
    -Xswiftc -DENABLE_ARC_SANITIZER \
    -Xswiftc -Xfrontend -Xswiftc -warn-long-expression-type-checking=500 \
    --product GodotNativeScriptGenerator

# run GodotNativeScriptGenerator tool (does not compile the entire library)
.build/debug/GodotNativeScriptGenerator generate \
    --output-common .gyb/common.swift \
    --output-classes .gyb/classes.swift

base=$PWD

mkdir -p .entrapta/ 
cd .entrapta/

if ! [ -d entrapta ]; then
    git clone https://github.com/kelvin13/entrapta 
else 
    cd entrapta 
    git pull 
    cd ..
fi 

cd entrapta/ 

check   "failed to build entrapta" \
        swift build -c release

sources="../../.gyb/entrapta.swift ../../.gyb/vector.swift.part"

if [ -z $local ]; then 
    .build/release/entrapta $sources --directory ../../Documentation/ --url-prefix https://kelvin13.github.io/godot-swift --github https://github.com/kelvin13/godot-swift --project Godot\ Swift\ Documentation --theme eternia
else 
    .build/release/entrapta $sources --directory ../../Documentation/ --url-prefix $base/Documentation --url-suffix /index.html --github https://github.com/kelvin13/godot-swift --project Godot\ Swift\ Documentation --theme eternia
fi 

cd ../../
